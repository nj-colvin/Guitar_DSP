
GuitarPedalHat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003168  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003368  08003368  00013368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033d0  080033d0  00020480  2**0
                  CONTENTS
  4 .ARM          00000008  080033d0  080033d0  000133d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033d8  080033d8  00020480  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033d8  080033d8  000133d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033dc  080033dc  000133dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000480  20000000  080033e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000138f4  20000480  08003860  00020480  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013d74  08003860  00023d74  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020480  2**0
                  CONTENTS, READONLY
 12 .debug_info   000099f8  00000000  00000000  000204ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a2b  00000000  00000000  00029ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  0002b8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  0002bf68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280e5  00000000  00000000  0002c510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007fbd  00000000  00000000  000545f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbc68  00000000  00000000  0005c5b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015821a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b10  00000000  00000000  00158270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000480 	.word	0x20000480
 800021c:	00000000 	.word	0x00000000
 8000220:	08003350 	.word	0x08003350

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000484 	.word	0x20000484
 800023c:	08003350 	.word	0x08003350

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SPI_Setup>:
 */


#include "SPI.h"

void SPI_Setup(void){
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
	// SPI Clock Enable
	RCC->APB2ENR |= RCC_APB2ENR_SPI1EN;
 80005dc:	4b13      	ldr	r3, [pc, #76]	; (800062c <SPI_Setup+0x54>)
 80005de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e0:	4a12      	ldr	r2, [pc, #72]	; (800062c <SPI_Setup+0x54>)
 80005e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005e6:	6453      	str	r3, [r2, #68]	; 0x44

	//           software SS | NSS high    | prescale /8 = 12Mhz | master mode  | read on falling edge
	SPI1->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI | (2 << SPI_CR1_BR_Pos) | SPI_CR1_MSTR | SPI_CR1_CPHA;
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <SPI_Setup+0x58>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4910      	ldr	r1, [pc, #64]	; (8000630 <SPI_Setup+0x58>)
 80005ee:	f240 3315 	movw	r3, #789	; 0x315
 80005f2:	4313      	orrs	r3, r2
 80005f4:	600b      	str	r3, [r1, #0]

	//           align FIFO 8b | 8 bit data size       | Rx DMA
	SPI1->CR2 |= SPI_CR2_FRXTH | (7 << SPI_CR2_DS_Pos) | SPI_CR2_RXDMAEN;
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <SPI_Setup+0x58>)
 80005f8:	685a      	ldr	r2, [r3, #4]
 80005fa:	490d      	ldr	r1, [pc, #52]	; (8000630 <SPI_Setup+0x58>)
 80005fc:	f241 7301 	movw	r3, #5889	; 0x1701
 8000600:	4313      	orrs	r3, r2
 8000602:	604b      	str	r3, [r1, #4]

	SPI_DMA_Setup();
 8000604:	f000 f816 	bl	8000634 <SPI_DMA_Setup>

	//           Tx DMA
	SPI1->CR2 |= SPI_CR2_TXDMAEN;
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <SPI_Setup+0x58>)
 800060a:	685b      	ldr	r3, [r3, #4]
 800060c:	4a08      	ldr	r2, [pc, #32]	; (8000630 <SPI_Setup+0x58>)
 800060e:	f043 0302 	orr.w	r3, r3, #2
 8000612:	6053      	str	r3, [r2, #4]

	TIMER3_Setup();
 8000614:	f000 f880 	bl	8000718 <TIMER3_Setup>
	TIMER2_Setup();
 8000618:	f000 f83a 	bl	8000690 <TIMER2_Setup>

	//           enable SPI
	SPI1->CR1 |= SPI_CR1_SPE;
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <SPI_Setup+0x58>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a03      	ldr	r2, [pc, #12]	; (8000630 <SPI_Setup+0x58>)
 8000622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000626:	6013      	str	r3, [r2, #0]
}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40023800 	.word	0x40023800
 8000630:	40013000 	.word	0x40013000

08000634 <SPI_DMA_Setup>:


void SPI_DMA_Setup(void){
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
	// DMA Clock Enable
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN | RCC_AHB1ENR_DMA2EN;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <SPI_DMA_Setup+0x44>)
 800063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063c:	4a0e      	ldr	r2, [pc, #56]	; (8000678 <SPI_DMA_Setup+0x44>)
 800063e:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 8000642:	6313      	str	r3, [r2, #48]	; 0x30

	// SPI1 Rx - Stream 0 - Channel 3
	DMA2_Stream0->PAR = (long)&(SPI1->DR);
 8000644:	4b0d      	ldr	r3, [pc, #52]	; (800067c <SPI_DMA_Setup+0x48>)
 8000646:	4a0e      	ldr	r2, [pc, #56]	; (8000680 <SPI_DMA_Setup+0x4c>)
 8000648:	609a      	str	r2, [r3, #8]
//	DMA2_Stream0->M0AR = (long)&(dataRx);
	//                  channel 3                 | mmry inc         | 16 bit transfer     | circular mode | enable
	DMA2_Stream0->CR |= (3 << DMA_SxCR_CHSEL_Pos) | DMA_SxCR_MINC;// | DMA_SxCR_MSIZE_0;// | DMA_SxCR_CIRC | DMA_SxCR_EN;
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <SPI_DMA_Setup+0x48>)
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	490b      	ldr	r1, [pc, #44]	; (800067c <SPI_DMA_Setup+0x48>)
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <SPI_DMA_Setup+0x50>)
 8000652:	4313      	orrs	r3, r2
 8000654:	600b      	str	r3, [r1, #0]
	DMA2_Stream0->NDTR = 0;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <SPI_DMA_Setup+0x48>)
 8000658:	2200      	movs	r2, #0
 800065a:	605a      	str	r2, [r3, #4]

	// SPI1 Tx - Stream 3 - Channel 3
	DMA2_Stream3->PAR = (long)&(SPI1->DR);
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <SPI_DMA_Setup+0x54>)
 800065e:	4a08      	ldr	r2, [pc, #32]	; (8000680 <SPI_DMA_Setup+0x4c>)
 8000660:	609a      	str	r2, [r3, #8]
//	DMA2_Stream3->M0AR = (long)&(dataTx);
	//                 channel 3                 | mmry inc      | mmry - prphrl  | enable
	DMA2_Stream3->CR = (3 << DMA_SxCR_CHSEL_Pos) | DMA_SxCR_MINC | DMA_SxCR_DIR_0;// | DMA_SxCR_EN;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <SPI_DMA_Setup+0x54>)
 8000664:	4a09      	ldr	r2, [pc, #36]	; (800068c <SPI_DMA_Setup+0x58>)
 8000666:	601a      	str	r2, [r3, #0]

	DMA2_Stream3->NDTR = 0;
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <SPI_DMA_Setup+0x54>)
 800066a:	2200      	movs	r2, #0
 800066c:	605a      	str	r2, [r3, #4]
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	40023800 	.word	0x40023800
 800067c:	40026410 	.word	0x40026410
 8000680:	4001300c 	.word	0x4001300c
 8000684:	06000400 	.word	0x06000400
 8000688:	40026458 	.word	0x40026458
 800068c:	06000440 	.word	0x06000440

08000690 <TIMER2_Setup>:

// Sync Pulse Generator
void TIMER2_Setup(void){
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
	// Timer2 Clock Enable
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <TIMER2_Setup+0x84>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	4a1e      	ldr	r2, [pc, #120]	; (8000714 <TIMER2_Setup+0x84>)
 800069a:	f043 0301 	orr.w	r3, r3, #1
 800069e:	6413      	str	r3, [r2, #64]	; 0x40

	//            trigger mode            | TIM3 as TRGI
	TIM2->SMCR |= (6 << TIM_SMCR_SMS_Pos) | (2 << TIM_SMCR_TS_Pos);
 80006a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006a4:	689b      	ldr	r3, [r3, #8]
 80006a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006aa:	f043 0326 	orr.w	r3, r3, #38	; 0x26
 80006ae:	6093      	str	r3, [r2, #8]

	//           one pulse mode
	TIM2->CR1 |= TIM_CR1_OPM;
 80006b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006ba:	f043 0308 	orr.w	r3, r3, #8
 80006be:	6013      	str	r3, [r2, #0]

	TIM2->PSC = 1-1;
 80006c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006c4:	2200      	movs	r2, #0
 80006c6:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 20-1;
 80006c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006cc:	2213      	movs	r2, #19
 80006ce:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = 10-1;
 80006d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006d4:	2209      	movs	r2, #9
 80006d6:	635a      	str	r2, [r3, #52]	; 0x34

	//              PWM Mode 2               | preload
//	TIM2->CCMR1 |= (7 << TIM_CCMR1_OC1M_Pos) | TIM_CCMR1_OC1PE;

	//              Force high            | preload
	TIM2->CCMR1 |= (5 << TIM_CCMR1_OC1M_Pos) | TIM_CCMR1_OC1PE;
 80006d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006e2:	f043 0358 	orr.w	r3, r3, #88	; 0x58
 80006e6:	6193      	str	r3, [r2, #24]

	TIM2->CCER |= TIM_CCER_CC1E;
 80006e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006ec:	6a1b      	ldr	r3, [r3, #32]
 80006ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006f2:	f043 0301 	orr.w	r3, r3, #1
 80006f6:	6213      	str	r3, [r2, #32]

	//           enable counter
	TIM2->CR1 |= TIM_CR1_CEN;
 80006f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000702:	f043 0301 	orr.w	r3, r3, #1
 8000706:	6013      	str	r3, [r2, #0]
}
 8000708:	bf00      	nop
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800

08000718 <TIMER3_Setup>:

// Input capture on SPI clock for timing sync pulse
void TIMER3_Setup(void){
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
	// Timer3 Clock Enable
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800071c:	4b18      	ldr	r3, [pc, #96]	; (8000780 <TIMER3_Setup+0x68>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	4a17      	ldr	r2, [pc, #92]	; (8000780 <TIMER3_Setup+0x68>)
 8000722:	f043 0302 	orr.w	r3, r3, #2
 8000726:	6413      	str	r3, [r2, #64]	; 0x40

	//            external clock mode     | clock trigger = TI2FP2
	TIM3->SMCR |= (7 << TIM_SMCR_SMS_Pos) | (6 << TIM_SMCR_TS_Pos);
 8000728:	4b16      	ldr	r3, [pc, #88]	; (8000784 <TIMER3_Setup+0x6c>)
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	4a15      	ldr	r2, [pc, #84]	; (8000784 <TIMER3_Setup+0x6c>)
 800072e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8000732:	6093      	str	r3, [r2, #8]

	//             TI2 on CH2
	TIM3->CCMR1 |= TIM_CCMR1_CC2S_0;
 8000734:	4b13      	ldr	r3, [pc, #76]	; (8000784 <TIMER3_Setup+0x6c>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	4a12      	ldr	r2, [pc, #72]	; (8000784 <TIMER3_Setup+0x6c>)
 800073a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800073e:	6193      	str	r3, [r2, #24]

	//            falling edge trigger
	TIM3->CCER |= TIM_CCER_CC2P;
 8000740:	4b10      	ldr	r3, [pc, #64]	; (8000784 <TIMER3_Setup+0x6c>)
 8000742:	6a1b      	ldr	r3, [r3, #32]
 8000744:	4a0f      	ldr	r2, [pc, #60]	; (8000784 <TIMER3_Setup+0x6c>)
 8000746:	f043 0320 	orr.w	r3, r3, #32
 800074a:	6213      	str	r3, [r2, #32]

	//            update as output trigger (TRGO)
	TIM3->CR2 |= (2 << TIM_CR2_MMS_Pos);
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <TIMER3_Setup+0x6c>)
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <TIMER3_Setup+0x6c>)
 8000752:	f043 0320 	orr.w	r3, r3, #32
 8000756:	6053      	str	r3, [r2, #4]

	// 34 clock counts
	TIM3->ARR = 24-1;
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <TIMER3_Setup+0x6c>)
 800075a:	2217      	movs	r2, #23
 800075c:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->DIER |= TIM_DIER_UIE;
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <TIMER3_Setup+0x6c>)
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	4a08      	ldr	r2, [pc, #32]	; (8000784 <TIMER3_Setup+0x6c>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	60d3      	str	r3, [r2, #12]

	//           enable
	TIM3->CR1 |= TIM_CR1_CEN;
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <TIMER3_Setup+0x6c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a05      	ldr	r2, [pc, #20]	; (8000784 <TIMER3_Setup+0x6c>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6013      	str	r3, [r2, #0]

	//TRGI = external clock, TRGO = Update;
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	40023800 	.word	0x40023800
 8000784:	40000400 	.word	0x40000400

08000788 <SPI_In_Progress>:


char SPI_In_Progress(void){
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
	if(DMA2_Stream0->CR & DMA_SxCR_EN){
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <SPI_In_Progress+0x20>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f003 0301 	and.w	r3, r3, #1
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SPI_In_Progress+0x14>
		return 1;
 8000798:	2301      	movs	r3, #1
 800079a:	e000      	b.n	800079e <SPI_In_Progress+0x16>
	}
	return 0;
 800079c:	2300      	movs	r3, #0
}
 800079e:	4618      	mov	r0, r3
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	40026410 	.word	0x40026410

080007ac <SPI_Communicate>:
	DMA2_Stream3->NDTR = 3;
	//                 channel 3                 | mmry inc      | circular mode | mmry - prphrl  | enable
	DMA2_Stream3->CR = (3 << DMA_SxCR_CHSEL_Pos) | DMA_SxCR_MINC | DMA_SxCR_CIRC | DMA_SxCR_DIR_0 | DMA_SxCR_EN;
}

void SPI_Communicate(unsigned char *TxBuffer, unsigned char *RxBuffer, int length){
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]

	// wait for DMA to finish
	while((DMA2_Stream3->CR & DMA_SxCR_EN) || (DMA2_Stream0->CR & DMA_SxCR_EN));
 80007b8:	bf00      	nop
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <SPI_Communicate+0x7c>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d1f9      	bne.n	80007ba <SPI_Communicate+0xe>
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <SPI_Communicate+0x80>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d1f3      	bne.n	80007ba <SPI_Communicate+0xe>
	//             clear flags
	DMA2->LIFCR |= DMA_LIFCR_CTCIF3 | DMA_LIFCR_CHTIF3 | DMA_LIFCR_CTCIF0 | DMA_LIFCR_CHTIF0;
 80007d2:	4b17      	ldr	r3, [pc, #92]	; (8000830 <SPI_Communicate+0x84>)
 80007d4:	689a      	ldr	r2, [r3, #8]
 80007d6:	4916      	ldr	r1, [pc, #88]	; (8000830 <SPI_Communicate+0x84>)
 80007d8:	4b16      	ldr	r3, [pc, #88]	; (8000834 <SPI_Communicate+0x88>)
 80007da:	4313      	orrs	r3, r2
 80007dc:	608b      	str	r3, [r1, #8]

	//Rx
	DMA2_Stream0->M0AR = (long)RxBuffer;
 80007de:	4a13      	ldr	r2, [pc, #76]	; (800082c <SPI_Communicate+0x80>)
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	60d3      	str	r3, [r2, #12]
	DMA2_Stream0->NDTR = length;
 80007e4:	4a11      	ldr	r2, [pc, #68]	; (800082c <SPI_Communicate+0x80>)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	6053      	str	r3, [r2, #4]
	//                 enable
	DMA2_Stream0->CR |= DMA_SxCR_EN;
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <SPI_Communicate+0x80>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	4a0f      	ldr	r2, [pc, #60]	; (800082c <SPI_Communicate+0x80>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6013      	str	r3, [r2, #0]

	// pull slave select low
	GPIOA->BSRR |= (GPIO_BSRR_BR4);
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <SPI_Communicate+0x8c>)
 80007f8:	699b      	ldr	r3, [r3, #24]
 80007fa:	4a0f      	ldr	r2, [pc, #60]	; (8000838 <SPI_Communicate+0x8c>)
 80007fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000800:	6193      	str	r3, [r2, #24]

	//Tx
	DMA2_Stream3->M0AR = (long)TxBuffer;
 8000802:	4a09      	ldr	r2, [pc, #36]	; (8000828 <SPI_Communicate+0x7c>)
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	60d3      	str	r3, [r2, #12]
	DMA2_Stream3->NDTR = length;
 8000808:	4a07      	ldr	r2, [pc, #28]	; (8000828 <SPI_Communicate+0x7c>)
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	6053      	str	r3, [r2, #4]

	//                 enable
	DMA2_Stream3->CR |= DMA_SxCR_EN;
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <SPI_Communicate+0x7c>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a05      	ldr	r2, [pc, #20]	; (8000828 <SPI_Communicate+0x7c>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6013      	str	r3, [r2, #0]

}
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40026458 	.word	0x40026458
 800082c:	40026410 	.word	0x40026410
 8000830:	40026400 	.word	0x40026400
 8000834:	0c000030 	.word	0x0c000030
 8000838:	40020000 	.word	0x40020000

0800083c <UART_Setup>:
 *      Author: nathan
 */

#include "UART.h"

void UART_Setup(void){
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	// UART  Clock Enable
	RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <UART_Setup+0x44>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	4a0e      	ldr	r2, [pc, #56]	; (8000880 <UART_Setup+0x44>)
 8000846:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800084a:	6413      	str	r3, [r2, #64]	; 0x40

	// Data length

	//set BAUD Rate
	//f_CK(APB1) / Baud = 80MHz / 115200
	USART3->BRR = 417;
 800084c:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <UART_Setup+0x48>)
 800084e:	f240 12a1 	movw	r2, #417	; 0x1a1
 8000852:	60da      	str	r2, [r3, #12]

	// enable UART
	USART3->CR1 |= USART_CR1_UE;
 8000854:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <UART_Setup+0x48>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a0a      	ldr	r2, [pc, #40]	; (8000884 <UART_Setup+0x48>)
 800085a:	f043 0301 	orr.w	r3, r3, #1
 800085e:	6013      	str	r3, [r2, #0]

	//             DMA transmit   | DMA receive
	USART3->CR3 |= USART_CR3_DMAT;// | USART_CR3_DMAR;
 8000860:	4b08      	ldr	r3, [pc, #32]	; (8000884 <UART_Setup+0x48>)
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	4a07      	ldr	r2, [pc, #28]	; (8000884 <UART_Setup+0x48>)
 8000866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086a:	6093      	str	r3, [r2, #8]

	// enable transmission and receive
	USART3->CR1 |= USART_CR1_TE | USART_CR1_RE;
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <UART_Setup+0x48>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <UART_Setup+0x48>)
 8000872:	f043 030c 	orr.w	r3, r3, #12
 8000876:	6013      	str	r3, [r2, #0]

	UART_DMA_Setup();
 8000878:	f000 f806 	bl	8000888 <UART_DMA_Setup>
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40023800 	.word	0x40023800
 8000884:	40004800 	.word	0x40004800

08000888 <UART_DMA_Setup>:

void UART_DMA_Setup(void){
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
	// DMA Clock Enable
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN | RCC_AHB1ENR_DMA2EN;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <UART_DMA_Setup+0x2c>)
 800088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000890:	4a08      	ldr	r2, [pc, #32]	; (80008b4 <UART_DMA_Setup+0x2c>)
 8000892:	f443 03c0 	orr.w	r3, r3, #6291456	; 0x600000
 8000896:	6313      	str	r3, [r2, #48]	; 0x30

	// USART3-Tx - Stream 4 - Channel 7

	DMA1_Stream4->PAR = (long)&(USART3->TDR);
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <UART_DMA_Setup+0x30>)
 800089a:	4a08      	ldr	r2, [pc, #32]	; (80008bc <UART_DMA_Setup+0x34>)
 800089c:	609a      	str	r2, [r3, #8]
//	DMA1_Stream4->M0AR = (long)&(dataTx);
	//                 channel 7                 | mmry inc      | mmry - prphrl  | enable
	DMA1_Stream4->CR = (7 << DMA_SxCR_CHSEL_Pos) | DMA_SxCR_MINC | DMA_SxCR_DIR_0;// | DMA_SxCR_EN;
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <UART_DMA_Setup+0x30>)
 80008a0:	4a07      	ldr	r2, [pc, #28]	; (80008c0 <UART_DMA_Setup+0x38>)
 80008a2:	601a      	str	r2, [r3, #0]

	DMA1_Stream4->NDTR = 0;
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <UART_DMA_Setup+0x30>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	605a      	str	r2, [r3, #4]
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40026070 	.word	0x40026070
 80008bc:	40004828 	.word	0x40004828
 80008c0:	0e000440 	.word	0x0e000440

080008c4 <UART_Transmit>:


void UART_Transmit(unsigned char * TxBuffer, unsigned int length){
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
 80008cc:	6039      	str	r1, [r7, #0]
	// wait for DAM to finish
	while(DMA1_Stream4->CR & DMA_SxCR_EN);
 80008ce:	bf00      	nop
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <UART_Transmit+0x48>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1f9      	bne.n	80008d0 <UART_Transmit+0xc>
	//             clear flags
	DMA1->HIFCR |= DMA_HIFCR_CTCIF4 | DMA_HIFCR_CHTIF4;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <UART_Transmit+0x4c>)
 80008de:	68db      	ldr	r3, [r3, #12]
 80008e0:	4a0b      	ldr	r2, [pc, #44]	; (8000910 <UART_Transmit+0x4c>)
 80008e2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80008e6:	60d3      	str	r3, [r2, #12]

	DMA1_Stream4->M0AR = (long)&(TxBuffer[0]); // memory address
 80008e8:	4a08      	ldr	r2, [pc, #32]	; (800090c <UART_Transmit+0x48>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	60d3      	str	r3, [r2, #12]
	DMA1_Stream4->NDTR = length;
 80008ee:	4a07      	ldr	r2, [pc, #28]	; (800090c <UART_Transmit+0x48>)
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	6053      	str	r3, [r2, #4]

	//                    Enable DMA
	DMA1_Stream4->CR |= DMA_SxCR_EN;
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <UART_Transmit+0x48>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <UART_Transmit+0x48>)
 80008fa:	f043 0301 	orr.w	r3, r3, #1
 80008fe:	6013      	str	r3, [r2, #0]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	40026070 	.word	0x40026070
 8000910:	40026000 	.word	0x40026000

08000914 <UART_Buffer_Is_Free>:


// check if the DMA is currently transferring from the UART buffer
char UART_Buffer_Is_Free(void){
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
	if(DMA1_Stream4->CR & DMA_SxCR_EN){
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <UART_Buffer_Is_Free+0x20>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f003 0301 	and.w	r3, r3, #1
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <UART_Buffer_Is_Free+0x14>
		return 0;
 8000924:	2300      	movs	r3, #0
 8000926:	e000      	b.n	800092a <UART_Buffer_Is_Free+0x16>
	}
	return 1;
 8000928:	2301      	movs	r3, #1
}
 800092a:	4618      	mov	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	40026070 	.word	0x40026070

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b08b      	sub	sp, #44	; 0x2c
 800093c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	unsigned char buffer[24];
	unsigned int effectNumber = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000942:	f000 fe3a 	bl	80015ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000946:	f000 f8e1 	bl	8000b0c <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  GPIO_Setup();
 800094a:	f000 fc35 	bl	80011b8 <GPIO_Setup>
  TIMER4_Setup();
 800094e:	f000 fc95 	bl	800127c <TIMER4_Setup>
  TIMER5_Setup();
 8000952:	f000 fcc9 	bl	80012e8 <TIMER5_Setup>
  TIMER12_Setup();
 8000956:	f000 fd0f 	bl	8001378 <TIMER12_Setup>
  SPI_Setup();
 800095a:	f7ff fe3d 	bl	80005d8 <SPI_Setup>
  UART_Setup();
 800095e:	f7ff ff6d 	bl	800083c <UART_Setup>
  ADC_Setup();
 8000962:	f000 fd2d 	bl	80013c0 <ADC_Setup>
  TIMER6_Setup();
 8000966:	f000 fce3 	bl	8001330 <TIMER6_Setup>


  sprintf((char*)buffer, "Start\r\n");
 800096a:	463b      	mov	r3, r7
 800096c:	495e      	ldr	r1, [pc, #376]	; (8000ae8 <main+0x1b0>)
 800096e:	4618      	mov	r0, r3
 8000970:	f002 f8c0 	bl	8002af4 <siprintf>
  UART_Transmit(buffer, 7);
 8000974:	463b      	mov	r3, r7
 8000976:	2107      	movs	r1, #7
 8000978:	4618      	mov	r0, r3
 800097a:	f7ff ffa3 	bl	80008c4 <UART_Transmit>

  Configure_MCP3561R(buffer, 1);
 800097e:	463b      	mov	r3, r7
 8000980:	2101      	movs	r1, #1
 8000982:	4618      	mov	r0, r3
 8000984:	f000 fbac 	bl	80010e0 <Configure_MCP3561R>

  // read from adc

  dataTx[0] = 0x41; //01 0000 01 - command byte: static read at adcdata
 8000988:	4b58      	ldr	r3, [pc, #352]	; (8000aec <main+0x1b4>)
 800098a:	2241      	movs	r2, #65	; 0x41
 800098c:	701a      	strb	r2, [r3, #0]

  SPI_Communicate(dataTx, dataRx, 4);
 800098e:	2204      	movs	r2, #4
 8000990:	4957      	ldr	r1, [pc, #348]	; (8000af0 <main+0x1b8>)
 8000992:	4856      	ldr	r0, [pc, #344]	; (8000aec <main+0x1b4>)
 8000994:	f7ff ff0a 	bl	80007ac <SPI_Communicate>

  HAL_Delay(100);
 8000998:	2064      	movs	r0, #100	; 0x64
 800099a:	f000 fe6b 	bl	8001674 <HAL_Delay>

  while(!UART_Buffer_Is_Free());
 800099e:	bf00      	nop
 80009a0:	f7ff ffb8 	bl	8000914 <UART_Buffer_Is_Free>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d0fa      	beq.n	80009a0 <main+0x68>

  sprintf((char*)buffer, "%2x %2x %2x %2x\r\n", dataRx[0], dataRx[1], dataRx[2], dataRx[3]);
 80009aa:	4b51      	ldr	r3, [pc, #324]	; (8000af0 <main+0x1b8>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	4619      	mov	r1, r3
 80009b0:	4b4f      	ldr	r3, [pc, #316]	; (8000af0 <main+0x1b8>)
 80009b2:	785b      	ldrb	r3, [r3, #1]
 80009b4:	461c      	mov	r4, r3
 80009b6:	4b4e      	ldr	r3, [pc, #312]	; (8000af0 <main+0x1b8>)
 80009b8:	789b      	ldrb	r3, [r3, #2]
 80009ba:	461a      	mov	r2, r3
 80009bc:	4b4c      	ldr	r3, [pc, #304]	; (8000af0 <main+0x1b8>)
 80009be:	78db      	ldrb	r3, [r3, #3]
 80009c0:	4638      	mov	r0, r7
 80009c2:	9301      	str	r3, [sp, #4]
 80009c4:	9200      	str	r2, [sp, #0]
 80009c6:	4623      	mov	r3, r4
 80009c8:	460a      	mov	r2, r1
 80009ca:	494a      	ldr	r1, [pc, #296]	; (8000af4 <main+0x1bc>)
 80009cc:	f002 f892 	bl	8002af4 <siprintf>
  UART_Transmit(buffer, 13);
 80009d0:	463b      	mov	r3, r7
 80009d2:	210d      	movs	r1, #13
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff75 	bl	80008c4 <UART_Transmit>
//	  HAL_Delay(1000);
//  }


  // resync sync pulses (may get out of sync with ADC communication)
  TIM3->CNT = 0;
 80009da:	4b47      	ldr	r3, [pc, #284]	; (8000af8 <main+0x1c0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	625a      	str	r2, [r3, #36]	; 0x24
  dataTx[0] = 0;
 80009e0:	4b42      	ldr	r3, [pc, #264]	; (8000aec <main+0x1b4>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
  //enable sync pulse output pulse
  TIM2->CCMR1 |= (7 << TIM_CCMR1_OC1M_Pos);
 80009e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009f0:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80009f4:	6193      	str	r3, [r2, #24]

  unsigned int Ucounter;

  effectNumber = 5;
 80009f6:	2305      	movs	r3, #5
 80009f8:	61bb      	str	r3, [r7, #24]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  if(ADC1->SR & ADC_SR_EOC){
 80009fa:	4b40      	ldr	r3, [pc, #256]	; (8000afc <main+0x1c4>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f003 0302 	and.w	r3, r3, #2
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0f9      	beq.n	80009fa <main+0xc2>

		  ADC1->SR &= ~ADC_SR_EOC;
 8000a06:	4b3d      	ldr	r3, [pc, #244]	; (8000afc <main+0x1c4>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a3c      	ldr	r2, [pc, #240]	; (8000afc <main+0x1c4>)
 8000a0c:	f023 0302 	bic.w	r3, r3, #2
 8000a10:	6013      	str	r3, [r2, #0]

		  // read/write
		  SPI_Communicate(dataTx, dataRx, 3);
 8000a12:	2203      	movs	r2, #3
 8000a14:	4936      	ldr	r1, [pc, #216]	; (8000af0 <main+0x1b8>)
 8000a16:	4835      	ldr	r0, [pc, #212]	; (8000aec <main+0x1b4>)
 8000a18:	f7ff fec8 	bl	80007ac <SPI_Communicate>
		  //wait for SPI
		  while(SPI_In_Progress());
 8000a1c:	bf00      	nop
 8000a1e:	f7ff feb3 	bl	8000788 <SPI_In_Progress>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d1fa      	bne.n	8000a1e <main+0xe6>

//		  dataIn = (dataRx[1] << 8) + dataRx[2];
		  dataIn = ADC1->DR - 0x7fff;
 8000a28:	4b34      	ldr	r3, [pc, #208]	; (8000afc <main+0x1c4>)
 8000a2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a2c:	4b34      	ldr	r3, [pc, #208]	; (8000b00 <main+0x1c8>)
 8000a2e:	4413      	add	r3, r2
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b34      	ldr	r3, [pc, #208]	; (8000b04 <main+0x1cc>)
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	69bb      	ldr	r3, [r7, #24]
 8000a38:	2b05      	cmp	r3, #5
 8000a3a:	d821      	bhi.n	8000a80 <main+0x148>
 8000a3c:	a201      	add	r2, pc, #4	; (adr r2, 8000a44 <main+0x10c>)
 8000a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a42:	bf00      	nop
 8000a44:	08000a5d 	.word	0x08000a5d
 8000a48:	08000a63 	.word	0x08000a63
 8000a4c:	08000a69 	.word	0x08000a69
 8000a50:	08000a6f 	.word	0x08000a6f
 8000a54:	08000a75 	.word	0x08000a75
 8000a58:	08000a7b 	.word	0x08000a7b

		  // Effects Here

		  switch(effectNumber){
		  	  case 0:
		  		  Clean();
 8000a5c:	f000 f8ec 	bl	8000c38 <Clean>
		  		  break;
 8000a60:	e00e      	b.n	8000a80 <main+0x148>
		  	  case 1:
		  		  Delay();
 8000a62:	f000 f8fb 	bl	8000c5c <Delay>
		  		  break;
 8000a66:	e00b      	b.n	8000a80 <main+0x148>
		  	  case 2:
		  		  Flange();
 8000a68:	f000 f926 	bl	8000cb8 <Flange>
				  break;
 8000a6c:	e008      	b.n	8000a80 <main+0x148>
		  	  case 3:
				  Phaser();
 8000a6e:	f000 f9d5 	bl	8000e1c <Phaser>
				  break;
 8000a72:	e005      	b.n	8000a80 <main+0x148>
			  case 4:
				  Reverb();
 8000a74:	f000 fa58 	bl	8000f28 <Reverb>
				  break;
 8000a78:	e002      	b.n	8000a80 <main+0x148>
			  case 5:
				  Sin_Delay();
 8000a7a:	f000 fabb 	bl	8000ff4 <Sin_Delay>
				  break;
 8000a7e:	bf00      	nop

		  }
		  // End Effects

		  dataTx[1] = dataOut >> 8;
 8000a80:	4b21      	ldr	r3, [pc, #132]	; (8000b08 <main+0x1d0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	121b      	asrs	r3, r3, #8
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b18      	ldr	r3, [pc, #96]	; (8000aec <main+0x1b4>)
 8000a8a:	705a      	strb	r2, [r3, #1]
		  dataTx[2] = dataOut;
 8000a8c:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <main+0x1d0>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <main+0x1b4>)
 8000a94:	709a      	strb	r2, [r3, #2]

		  if (Ucounter >= 32000 && UART_Buffer_Is_Free()){
 8000a96:	69fb      	ldr	r3, [r7, #28]
 8000a98:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000a9c:	d31f      	bcc.n	8000ade <main+0x1a6>
 8000a9e:	f7ff ff39 	bl	8000914 <UART_Buffer_Is_Free>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d01a      	beq.n	8000ade <main+0x1a6>
			  sprintf((char*)buffer, "%2x %2x %2x %2x\r\n", dataRx[0], dataRx[1], dataRx[2], dataRx[3]);
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <main+0x1b8>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <main+0x1b8>)
 8000ab0:	785b      	ldrb	r3, [r3, #1]
 8000ab2:	461c      	mov	r4, r3
 8000ab4:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <main+0x1b8>)
 8000ab6:	789b      	ldrb	r3, [r3, #2]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <main+0x1b8>)
 8000abc:	78db      	ldrb	r3, [r3, #3]
 8000abe:	4638      	mov	r0, r7
 8000ac0:	9301      	str	r3, [sp, #4]
 8000ac2:	9200      	str	r2, [sp, #0]
 8000ac4:	4623      	mov	r3, r4
 8000ac6:	460a      	mov	r2, r1
 8000ac8:	490a      	ldr	r1, [pc, #40]	; (8000af4 <main+0x1bc>)
 8000aca:	f002 f813 	bl	8002af4 <siprintf>
			  UART_Transmit(buffer, 13);
 8000ace:	463b      	mov	r3, r7
 8000ad0:	210d      	movs	r1, #13
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fef6 	bl	80008c4 <UART_Transmit>
			  Ucounter = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61fb      	str	r3, [r7, #28]
 8000adc:	e002      	b.n	8000ae4 <main+0x1ac>
		  }
		  else{
			  Ucounter++;
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	61fb      	str	r3, [r7, #28]
	  if(ADC1->SR & ADC_SR_EOC){
 8000ae4:	e789      	b.n	80009fa <main+0xc2>
 8000ae6:	bf00      	nop
 8000ae8:	08003368 	.word	0x08003368
 8000aec:	200004c0 	.word	0x200004c0
 8000af0:	200004b8 	.word	0x200004b8
 8000af4:	08003370 	.word	0x08003370
 8000af8:	40000400 	.word	0x40000400
 8000afc:	40012000 	.word	0x40012000
 8000b00:	ffff8001 	.word	0xffff8001
 8000b04:	200004c8 	.word	0x200004c8
 8000b08:	200004d4 	.word	0x200004d4

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b0b8      	sub	sp, #224	; 0xe0
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b16:	2234      	movs	r2, #52	; 0x34
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 ffe2 	bl	8002ae4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b30:	f107 0308 	add.w	r3, r7, #8
 8000b34:	2290      	movs	r2, #144	; 0x90
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f001 ffd3 	bl	8002ae4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b3e:	f000 fea3 	bl	8001888 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b42:	4b3a      	ldr	r3, [pc, #232]	; (8000c2c <SystemClock_Config+0x120>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a39      	ldr	r2, [pc, #228]	; (8000c2c <SystemClock_Config+0x120>)
 8000b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b37      	ldr	r3, [pc, #220]	; (8000c2c <SystemClock_Config+0x120>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b5a:	4b35      	ldr	r3, [pc, #212]	; (8000c30 <SystemClock_Config+0x124>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b62:	4a33      	ldr	r2, [pc, #204]	; (8000c30 <SystemClock_Config+0x124>)
 8000b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	4b31      	ldr	r3, [pc, #196]	; (8000c30 <SystemClock_Config+0x124>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b76:	2301      	movs	r3, #1
 8000b78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b7c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b84:	2302      	movs	r3, #2
 8000b86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b92:	2304      	movs	r3, #4
 8000b94:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b98:	2360      	movs	r3, #96	; 0x60
 8000b9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000baa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 feca 	bl	8001948 <HAL_RCC_OscConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000bba:	f000 faf7 	bl	80011ac <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bbe:	f000 fe73 	bl	80018a8 <HAL_PWREx_EnableOverDrive>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bc8:	f000 faf0 	bl	80011ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bcc:	230f      	movs	r3, #15
 8000bce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000bf0:	2103      	movs	r1, #3
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 f956 	bl	8001ea4 <HAL_RCC_ClockConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000bfe:	f000 fad5 	bl	80011ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <SystemClock_Config+0x128>)
 8000c04:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c10:	f107 0308 	add.w	r3, r7, #8
 8000c14:	4618      	mov	r0, r3
 8000c16:	f001 fb13 	bl	8002240 <HAL_RCCEx_PeriphCLKConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000c20:	f000 fac4 	bl	80011ac <Error_Handler>
  }
}
 8000c24:	bf00      	nop
 8000c26:	37e0      	adds	r7, #224	; 0xe0
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40007000 	.word	0x40007000
 8000c34:	00200100 	.word	0x00200100

08000c38 <Clean>:

/* USER CODE BEGIN 4 */

void Clean(void){
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
	dataOut = dataIn + 0x7FFF;
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <Clean+0x1c>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000c44:	4413      	add	r3, r2
 8000c46:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <Clean+0x20>)
 8000c48:	6013      	str	r3, [r2, #0]
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	200004c8 	.word	0x200004c8
 8000c58:	200004d4 	.word	0x200004d4

08000c5c <Delay>:

void Delay(void){
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
	dataOut = sampleBuffer[sampleBufferIndex] + 0x7FFF;
 8000c60:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <Delay+0x4c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a11      	ldr	r2, [pc, #68]	; (8000cac <Delay+0x50>)
 8000c66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c6a:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a0f      	ldr	r2, [pc, #60]	; (8000cb0 <Delay+0x54>)
 8000c72:	6013      	str	r3, [r2, #0]

	sampleBuffer[sampleBufferIndex] = dataIn;
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <Delay+0x4c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0e      	ldr	r2, [pc, #56]	; (8000cb4 <Delay+0x58>)
 8000c7a:	6812      	ldr	r2, [r2, #0]
 8000c7c:	490b      	ldr	r1, [pc, #44]	; (8000cac <Delay+0x50>)
 8000c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	sampleBufferIndex++;
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <Delay+0x4c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	3301      	adds	r3, #1
 8000c88:	4a07      	ldr	r2, [pc, #28]	; (8000ca8 <Delay+0x4c>)
 8000c8a:	6013      	str	r3, [r2, #0]
	if (sampleBufferIndex >= 5000){
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <Delay+0x4c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f241 3287 	movw	r2, #4999	; 0x1387
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d902      	bls.n	8000c9e <Delay+0x42>
	  sampleBufferIndex = 0;
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <Delay+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
	}
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	20013d5c 	.word	0x20013d5c
 8000cac:	200004d8 	.word	0x200004d8
 8000cb0:	200004d4 	.word	0x200004d4
 8000cb4:	200004c8 	.word	0x200004c8

08000cb8 <Flange>:

void Flange(void){
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
	dataOut = sampleBuffer[(sampleBufferIndex + (lookUp[TIM12->CNT]>>9)) % 1000] + 0x7FFF;
 8000cbc:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <Flange+0x6c>)
 8000cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cc0:	4a19      	ldr	r2, [pc, #100]	; (8000d28 <Flange+0x70>)
 8000cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc6:	0a5a      	lsrs	r2, r3, #9
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <Flange+0x74>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	441a      	add	r2, r3
 8000cce:	4b18      	ldr	r3, [pc, #96]	; (8000d30 <Flange+0x78>)
 8000cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8000cd4:	099b      	lsrs	r3, r3, #6
 8000cd6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000cda:	fb01 f303 	mul.w	r3, r1, r3
 8000cde:	1ad3      	subs	r3, r2, r3
 8000ce0:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <Flange+0x7c>)
 8000ce2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ce6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000cea:	4413      	add	r3, r2
 8000cec:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <Flange+0x80>)
 8000cee:	6013      	str	r3, [r2, #0]

	sampleBuffer[sampleBufferIndex] = dataIn;
 8000cf0:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <Flange+0x74>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a11      	ldr	r2, [pc, #68]	; (8000d3c <Flange+0x84>)
 8000cf6:	6812      	ldr	r2, [r2, #0]
 8000cf8:	490e      	ldr	r1, [pc, #56]	; (8000d34 <Flange+0x7c>)
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	sampleBufferIndex++;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <Flange+0x74>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	3301      	adds	r3, #1
 8000d04:	4a09      	ldr	r2, [pc, #36]	; (8000d2c <Flange+0x74>)
 8000d06:	6013      	str	r3, [r2, #0]
	if (sampleBufferIndex >= 1000){
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <Flange+0x74>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000d10:	d302      	bcc.n	8000d18 <Flange+0x60>
	  sampleBufferIndex = 0;
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <Flange+0x74>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
	}
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40001800 	.word	0x40001800
 8000d28:	20000010 	.word	0x20000010
 8000d2c:	20013d5c 	.word	0x20013d5c
 8000d30:	10624dd3 	.word	0x10624dd3
 8000d34:	200004d8 	.word	0x200004d8
 8000d38:	200004d4 	.word	0x200004d4
 8000d3c:	200004c8 	.word	0x200004c8

08000d40 <Phaser_Stage>:

void Phaser_Stage(int stageNumber, int a){
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
	int inputOffset = (stageNumber - 1) * 2;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	60fb      	str	r3, [r7, #12]
	int outputOffset = stageNumber * 2;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]

	sampleBuffer[sampleBufferIndex + outputOffset] = (a * (sampleBuffer[!sampleBufferIndex + outputOffset] - sampleBuffer[sampleBufferIndex + inputOffset]) + \
 8000d58:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <Phaser_Stage+0xd0>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	bf0c      	ite	eq
 8000d60:	2301      	moveq	r3, #1
 8000d62:	2300      	movne	r3, #0
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	461a      	mov	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a29      	ldr	r2, [pc, #164]	; (8000e14 <Phaser_Stage+0xd4>)
 8000d6e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d72:	4b27      	ldr	r3, [pc, #156]	; (8000e10 <Phaser_Stage+0xd0>)
 8000d74:	6819      	ldr	r1, [r3, #0]
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	440b      	add	r3, r1
 8000d7a:	4926      	ldr	r1, [pc, #152]	; (8000e14 <Phaser_Stage+0xd4>)
 8000d7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	fb02 f203 	mul.w	r2, r2, r3
		  (sampleBuffer[!sampleBufferIndex + inputOffset] << 8)) >> 8;
 8000d88:	4b21      	ldr	r3, [pc, #132]	; (8000e10 <Phaser_Stage+0xd0>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	bf0c      	ite	eq
 8000d90:	2301      	moveq	r3, #1
 8000d92:	2300      	movne	r3, #0
 8000d94:	b2db      	uxtb	r3, r3
 8000d96:	4619      	mov	r1, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	440b      	add	r3, r1
 8000d9c:	491d      	ldr	r1, [pc, #116]	; (8000e14 <Phaser_Stage+0xd4>)
 8000d9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000da2:	021b      	lsls	r3, r3, #8
	sampleBuffer[sampleBufferIndex + outputOffset] = (a * (sampleBuffer[!sampleBufferIndex + outputOffset] - sampleBuffer[sampleBufferIndex + inputOffset]) + \
 8000da4:	441a      	add	r2, r3
 8000da6:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <Phaser_Stage+0xd0>)
 8000da8:	6819      	ldr	r1, [r3, #0]
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	440b      	add	r3, r1
		  (sampleBuffer[!sampleBufferIndex + inputOffset] << 8)) >> 8;
 8000dae:	1212      	asrs	r2, r2, #8
	sampleBuffer[sampleBufferIndex + outputOffset] = (a * (sampleBuffer[!sampleBufferIndex + outputOffset] - sampleBuffer[sampleBufferIndex + inputOffset]) + \
 8000db0:	4918      	ldr	r1, [pc, #96]	; (8000e14 <Phaser_Stage+0xd4>)
 8000db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (sampleBuffer[sampleBufferIndex + outputOffset] > 32767){
 8000db6:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <Phaser_Stage+0xd0>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4a15      	ldr	r2, [pc, #84]	; (8000e14 <Phaser_Stage+0xd4>)
 8000dc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000dc8:	db09      	blt.n	8000dde <Phaser_Stage+0x9e>
	  sampleBuffer[sampleBufferIndex + outputOffset] = 32767;
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <Phaser_Stage+0xd0>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <Phaser_Stage+0xd4>)
 8000dd4:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000dd8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
	else if (sampleBuffer[sampleBufferIndex + outputOffset] < -32768){
	  sampleBuffer[sampleBufferIndex + outputOffset] = -32768;
	}
}
 8000ddc:	e011      	b.n	8000e02 <Phaser_Stage+0xc2>
	else if (sampleBuffer[sampleBufferIndex + outputOffset] < -32768){
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <Phaser_Stage+0xd0>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	4413      	add	r3, r2
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <Phaser_Stage+0xd4>)
 8000de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dec:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8000df0:	da07      	bge.n	8000e02 <Phaser_Stage+0xc2>
	  sampleBuffer[sampleBufferIndex + outputOffset] = -32768;
 8000df2:	4b07      	ldr	r3, [pc, #28]	; (8000e10 <Phaser_Stage+0xd0>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	4413      	add	r3, r2
 8000dfa:	4a06      	ldr	r2, [pc, #24]	; (8000e14 <Phaser_Stage+0xd4>)
 8000dfc:	4906      	ldr	r1, [pc, #24]	; (8000e18 <Phaser_Stage+0xd8>)
 8000dfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20013d5c 	.word	0x20013d5c
 8000e14:	200004d8 	.word	0x200004d8
 8000e18:	ffff8000 	.word	0xffff8000

08000e1c <Phaser>:

void Phaser(void){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
	  sampleBuffer[sampleBufferIndex] = dataIn;
 8000e20:	4b33      	ldr	r3, [pc, #204]	; (8000ef0 <Phaser+0xd4>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a33      	ldr	r2, [pc, #204]	; (8000ef4 <Phaser+0xd8>)
 8000e26:	6812      	ldr	r2, [r2, #0]
 8000e28:	4933      	ldr	r1, [pc, #204]	; (8000ef8 <Phaser+0xdc>)
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	  a = a0 + (lookUp[TIM12->CNT] >> 10);
 8000e2e:	4b33      	ldr	r3, [pc, #204]	; (8000efc <Phaser+0xe0>)
 8000e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e32:	4a33      	ldr	r2, [pc, #204]	; (8000f00 <Phaser+0xe4>)
 8000e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e38:	0a9b      	lsrs	r3, r3, #10
 8000e3a:	4a32      	ldr	r2, [pc, #200]	; (8000f04 <Phaser+0xe8>)
 8000e3c:	6812      	ldr	r2, [r2, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b31      	ldr	r3, [pc, #196]	; (8000f08 <Phaser+0xec>)
 8000e44:	601a      	str	r2, [r3, #0]
	  b = b0 + (lookUp[TIM12->CNT] >> 10);
 8000e46:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <Phaser+0xe0>)
 8000e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4a:	4a2d      	ldr	r2, [pc, #180]	; (8000f00 <Phaser+0xe4>)
 8000e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e50:	0a9b      	lsrs	r3, r3, #10
 8000e52:	4a2e      	ldr	r2, [pc, #184]	; (8000f0c <Phaser+0xf0>)
 8000e54:	6812      	ldr	r2, [r2, #0]
 8000e56:	4413      	add	r3, r2
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b2d      	ldr	r3, [pc, #180]	; (8000f10 <Phaser+0xf4>)
 8000e5c:	601a      	str	r2, [r3, #0]
	  c = c0 + (lookUp[TIM12->CNT] >> 10);
 8000e5e:	4b27      	ldr	r3, [pc, #156]	; (8000efc <Phaser+0xe0>)
 8000e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e62:	4a27      	ldr	r2, [pc, #156]	; (8000f00 <Phaser+0xe4>)
 8000e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e68:	0a9b      	lsrs	r3, r3, #10
 8000e6a:	4a2a      	ldr	r2, [pc, #168]	; (8000f14 <Phaser+0xf8>)
 8000e6c:	6812      	ldr	r2, [r2, #0]
 8000e6e:	4413      	add	r3, r2
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b29      	ldr	r3, [pc, #164]	; (8000f18 <Phaser+0xfc>)
 8000e74:	601a      	str	r2, [r3, #0]
	  d = d0 + (lookUp[TIM12->CNT] >> 10);
 8000e76:	4b21      	ldr	r3, [pc, #132]	; (8000efc <Phaser+0xe0>)
 8000e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e7a:	4a21      	ldr	r2, [pc, #132]	; (8000f00 <Phaser+0xe4>)
 8000e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e80:	0a9b      	lsrs	r3, r3, #10
 8000e82:	4a26      	ldr	r2, [pc, #152]	; (8000f1c <Phaser+0x100>)
 8000e84:	6812      	ldr	r2, [r2, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <Phaser+0x104>)
 8000e8c:	601a      	str	r2, [r3, #0]

	  Phaser_Stage(1, a);
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <Phaser+0xec>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4619      	mov	r1, r3
 8000e94:	2001      	movs	r0, #1
 8000e96:	f7ff ff53 	bl	8000d40 <Phaser_Stage>
	  Phaser_Stage(2, b);
 8000e9a:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <Phaser+0xf4>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f7ff ff4d 	bl	8000d40 <Phaser_Stage>
	  Phaser_Stage(3, c);
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <Phaser+0xfc>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	2003      	movs	r0, #3
 8000eae:	f7ff ff47 	bl	8000d40 <Phaser_Stage>
	  Phaser_Stage(4, d);
 8000eb2:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <Phaser+0x104>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	2004      	movs	r0, #4
 8000eba:	f7ff ff41 	bl	8000d40 <Phaser_Stage>

	  dataOut = sampleBuffer[sampleBufferIndex+8] + 0x7FFF;
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <Phaser+0xd4>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	3308      	adds	r3, #8
 8000ec4:	4a0c      	ldr	r2, [pc, #48]	; (8000ef8 <Phaser+0xdc>)
 8000ec6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000eca:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <Phaser+0x108>)
 8000ed2:	6013      	str	r3, [r2, #0]

	  sampleBufferIndex++;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	; (8000ef0 <Phaser+0xd4>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	4a05      	ldr	r2, [pc, #20]	; (8000ef0 <Phaser+0xd4>)
 8000edc:	6013      	str	r3, [r2, #0]
	  if (sampleBufferIndex >= 2){
 8000ede:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <Phaser+0xd4>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b01      	cmp	r3, #1
 8000ee4:	d902      	bls.n	8000eec <Phaser+0xd0>
		  sampleBufferIndex = 0;
 8000ee6:	4b02      	ldr	r3, [pc, #8]	; (8000ef0 <Phaser+0xd4>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
	  }
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20013d5c 	.word	0x20013d5c
 8000ef4:	200004c8 	.word	0x200004c8
 8000ef8:	200004d8 	.word	0x200004d8
 8000efc:	40001800 	.word	0x40001800
 8000f00:	20000010 	.word	0x20000010
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20013d58 	.word	0x20013d58
 8000f0c:	20000004 	.word	0x20000004
 8000f10:	200004b4 	.word	0x200004b4
 8000f14:	20000008 	.word	0x20000008
 8000f18:	200004cc 	.word	0x200004cc
 8000f1c:	2000000c 	.word	0x2000000c
 8000f20:	200004d0 	.word	0x200004d0
 8000f24:	200004d4 	.word	0x200004d4

08000f28 <Reverb>:

void Reverb(void){
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
	dataOut = ((sampleBuffer[sampleBufferIndex] + \
 8000f2c:	4b2c      	ldr	r3, [pc, #176]	; (8000fe0 <Reverb+0xb8>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a2c      	ldr	r2, [pc, #176]	; (8000fe4 <Reverb+0xbc>)
 8000f32:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
		  sampleBuffer[(sampleBufferIndex + 2000) % 10000] + \
 8000f36:	4b2a      	ldr	r3, [pc, #168]	; (8000fe0 <Reverb+0xb8>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8000f3e:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <Reverb+0xc0>)
 8000f40:	fba3 0302 	umull	r0, r3, r3, r2
 8000f44:	0b5b      	lsrs	r3, r3, #13
 8000f46:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f4a:	fb00 f303 	mul.w	r3, r0, r3
 8000f4e:	1ad3      	subs	r3, r2, r3
 8000f50:	4a24      	ldr	r2, [pc, #144]	; (8000fe4 <Reverb+0xbc>)
 8000f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	dataOut = ((sampleBuffer[sampleBufferIndex] + \
 8000f56:	4419      	add	r1, r3
		  sampleBuffer[(sampleBufferIndex + 4000) % 10000] + \
 8000f58:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <Reverb+0xb8>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f503 627a 	add.w	r2, r3, #4000	; 0xfa0
 8000f60:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <Reverb+0xc0>)
 8000f62:	fba3 0302 	umull	r0, r3, r3, r2
 8000f66:	0b5b      	lsrs	r3, r3, #13
 8000f68:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f6c:	fb00 f303 	mul.w	r3, r0, r3
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <Reverb+0xbc>)
 8000f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		  sampleBuffer[(sampleBufferIndex + 2000) % 10000] + \
 8000f78:	4419      	add	r1, r3
		  sampleBuffer[(sampleBufferIndex + 7500) % 10000]) >> 2) + 0x7FFF;
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <Reverb+0xb8>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8000f82:	4413      	add	r3, r2
 8000f84:	4a18      	ldr	r2, [pc, #96]	; (8000fe8 <Reverb+0xc0>)
 8000f86:	fba2 0203 	umull	r0, r2, r2, r3
 8000f8a:	0b52      	lsrs	r2, r2, #13
 8000f8c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f90:	fb00 f202 	mul.w	r2, r0, r2
 8000f94:	1a9a      	subs	r2, r3, r2
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <Reverb+0xbc>)
 8000f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		  sampleBuffer[(sampleBufferIndex + 4000) % 10000] + \
 8000f9c:	440b      	add	r3, r1
		  sampleBuffer[(sampleBufferIndex + 7500) % 10000]) >> 2) + 0x7FFF;
 8000f9e:	109a      	asrs	r2, r3, #2
 8000fa0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000fa4:	4413      	add	r3, r2
	dataOut = ((sampleBuffer[sampleBufferIndex] + \
 8000fa6:	4a11      	ldr	r2, [pc, #68]	; (8000fec <Reverb+0xc4>)
 8000fa8:	6013      	str	r3, [r2, #0]

	sampleBuffer[sampleBufferIndex] = dataIn;
 8000faa:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <Reverb+0xb8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <Reverb+0xc8>)
 8000fb0:	6812      	ldr	r2, [r2, #0]
 8000fb2:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <Reverb+0xbc>)
 8000fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	sampleBufferIndex++;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <Reverb+0xb8>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <Reverb+0xb8>)
 8000fc0:	6013      	str	r3, [r2, #0]
	if (sampleBufferIndex >= 10000){
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <Reverb+0xb8>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d902      	bls.n	8000fd4 <Reverb+0xac>
	  sampleBufferIndex = 0;
 8000fce:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <Reverb+0xb8>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
	}
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20013d5c 	.word	0x20013d5c
 8000fe4:	200004d8 	.word	0x200004d8
 8000fe8:	d1b71759 	.word	0xd1b71759
 8000fec:	200004d4 	.word	0x200004d4
 8000ff0:	200004c8 	.word	0x200004c8

08000ff4 <Sin_Delay>:

void Sin_Delay(void){
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
	dataOut = sampleBuffer[(sampleBufferIndex + (lookUp[TIM12->CNT]>>6)) % 10000] + 0x7FFF;
 8000ff8:	4b19      	ldr	r3, [pc, #100]	; (8001060 <Sin_Delay+0x6c>)
 8000ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffc:	4a19      	ldr	r2, [pc, #100]	; (8001064 <Sin_Delay+0x70>)
 8000ffe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001002:	099a      	lsrs	r2, r3, #6
 8001004:	4b18      	ldr	r3, [pc, #96]	; (8001068 <Sin_Delay+0x74>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	441a      	add	r2, r3
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <Sin_Delay+0x78>)
 800100c:	fba3 1302 	umull	r1, r3, r3, r2
 8001010:	0b5b      	lsrs	r3, r3, #13
 8001012:	f242 7110 	movw	r1, #10000	; 0x2710
 8001016:	fb01 f303 	mul.w	r3, r1, r3
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	4a14      	ldr	r2, [pc, #80]	; (8001070 <Sin_Delay+0x7c>)
 800101e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001022:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001026:	4413      	add	r3, r2
 8001028:	4a12      	ldr	r2, [pc, #72]	; (8001074 <Sin_Delay+0x80>)
 800102a:	6013      	str	r3, [r2, #0]

	sampleBuffer[sampleBufferIndex] = dataIn;
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <Sin_Delay+0x74>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a11      	ldr	r2, [pc, #68]	; (8001078 <Sin_Delay+0x84>)
 8001032:	6812      	ldr	r2, [r2, #0]
 8001034:	490e      	ldr	r1, [pc, #56]	; (8001070 <Sin_Delay+0x7c>)
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	sampleBufferIndex++;
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <Sin_Delay+0x74>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	3301      	adds	r3, #1
 8001040:	4a09      	ldr	r2, [pc, #36]	; (8001068 <Sin_Delay+0x74>)
 8001042:	6013      	str	r3, [r2, #0]
	if (sampleBufferIndex >= 10000){
 8001044:	4b08      	ldr	r3, [pc, #32]	; (8001068 <Sin_Delay+0x74>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f242 720f 	movw	r2, #9999	; 0x270f
 800104c:	4293      	cmp	r3, r2
 800104e:	d902      	bls.n	8001056 <Sin_Delay+0x62>
	  sampleBufferIndex = 0;
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <Sin_Delay+0x74>)
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
	}
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	40001800 	.word	0x40001800
 8001064:	20000010 	.word	0x20000010
 8001068:	20013d5c 	.word	0x20013d5c
 800106c:	d1b71759 	.word	0xd1b71759
 8001070:	200004d8 	.word	0x200004d8
 8001074:	200004d4 	.word	0x200004d4
 8001078:	200004c8 	.word	0x200004c8

0800107c <TIM3_IRQHandler>:


void TIM3_IRQHandler(void){
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
	dataTx[1] = (lookUp[lookupIndex] >> 8);
 8001080:	4b13      	ldr	r3, [pc, #76]	; (80010d0 <TIM3_IRQHandler+0x54>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a13      	ldr	r2, [pc, #76]	; (80010d4 <TIM3_IRQHandler+0x58>)
 8001086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108a:	0a1b      	lsrs	r3, r3, #8
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <TIM3_IRQHandler+0x5c>)
 8001090:	705a      	strb	r2, [r3, #1]
	dataTx[2] = lookUp[lookupIndex];
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <TIM3_IRQHandler+0x54>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <TIM3_IRQHandler+0x58>)
 8001098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <TIM3_IRQHandler+0x5c>)
 80010a0:	709a      	strb	r2, [r3, #2]
	lookupIndex++;
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <TIM3_IRQHandler+0x54>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	3301      	adds	r3, #1
 80010a8:	4a09      	ldr	r2, [pc, #36]	; (80010d0 <TIM3_IRQHandler+0x54>)
 80010aa:	6013      	str	r3, [r2, #0]
	if (lookupIndex >= 200){
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <TIM3_IRQHandler+0x54>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2bc7      	cmp	r3, #199	; 0xc7
 80010b2:	d902      	bls.n	80010ba <TIM3_IRQHandler+0x3e>
		lookupIndex = 0;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <TIM3_IRQHandler+0x54>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
	}

	TIM3->SR &= ~TIM_SR_UIF;
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <TIM3_IRQHandler+0x60>)
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	4a07      	ldr	r2, [pc, #28]	; (80010dc <TIM3_IRQHandler+0x60>)
 80010c0:	f023 0301 	bic.w	r3, r3, #1
 80010c4:	6113      	str	r3, [r2, #16]
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	2000049c 	.word	0x2000049c
 80010d4:	20000010 	.word	0x20000010
 80010d8:	200004c0 	.word	0x200004c0
 80010dc:	40000400 	.word	0x40000400

080010e0 <Configure_MCP3561R>:



void Configure_MCP3561R(unsigned char *buffer, char readback){
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	70fb      	strb	r3, [r7, #3]
	  // configure ADC registers

	  dataTx[0] = 0x46; //01 0001 10 - command byte: write starting at config0
 80010ec:	4b2b      	ldr	r3, [pc, #172]	; (800119c <Configure_MCP3561R+0xbc>)
 80010ee:	2246      	movs	r2, #70	; 0x46
 80010f0:	701a      	strb	r2, [r3, #0]
	  dataTx[1] = 0xE3; // 1110 0011 - config 0: internal reference, start adc conversions
 80010f2:	4b2a      	ldr	r3, [pc, #168]	; (800119c <Configure_MCP3561R+0xbc>)
 80010f4:	22e3      	movs	r2, #227	; 0xe3
 80010f6:	705a      	strb	r2, [r3, #1]
	  dataTx[2] = 0x00; // 0000 0000 - config 1: 16bit adc
 80010f8:	4b28      	ldr	r3, [pc, #160]	; (800119c <Configure_MCP3561R+0xbc>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	709a      	strb	r2, [r3, #2]
	  dataTx[3] = 0x8B; // 1000 1011 - config 2: gain = 1
 80010fe:	4b27      	ldr	r3, [pc, #156]	; (800119c <Configure_MCP3561R+0xbc>)
 8001100:	228b      	movs	r2, #139	; 0x8b
 8001102:	70da      	strb	r2, [r3, #3]
	  dataTx[4] = 0xC0; // 1100 0000 - config 3: continuous conversion, 24bit adc register, no calibration
 8001104:	4b25      	ldr	r3, [pc, #148]	; (800119c <Configure_MCP3561R+0xbc>)
 8001106:	22c0      	movs	r2, #192	; 0xc0
 8001108:	711a      	strb	r2, [r3, #4]
	  dataTx[5] = 0x73; // 0111 0011 - IRQ
 800110a:	4b24      	ldr	r3, [pc, #144]	; (800119c <Configure_MCP3561R+0xbc>)
 800110c:	2273      	movs	r2, #115	; 0x73
 800110e:	715a      	strb	r2, [r3, #5]
	  dataTx[6] = 0x08; // 0000 1000 - Multiplexer: V+ = CH0, V- = GND
 8001110:	4b22      	ldr	r3, [pc, #136]	; (800119c <Configure_MCP3561R+0xbc>)
 8001112:	2208      	movs	r2, #8
 8001114:	719a      	strb	r2, [r3, #6]

	  SPI_Communicate(dataTx, dataRx, 7);
 8001116:	2207      	movs	r2, #7
 8001118:	4921      	ldr	r1, [pc, #132]	; (80011a0 <Configure_MCP3561R+0xc0>)
 800111a:	4820      	ldr	r0, [pc, #128]	; (800119c <Configure_MCP3561R+0xbc>)
 800111c:	f7ff fb46 	bl	80007ac <SPI_Communicate>

	  HAL_Delay(100);
 8001120:	2064      	movs	r0, #100	; 0x64
 8001122:	f000 faa7 	bl	8001674 <HAL_Delay>

	  GPIOA->BSRR |= (GPIO_BSRR_BS4);
 8001126:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <Configure_MCP3561R+0xc4>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <Configure_MCP3561R+0xc4>)
 800112c:	f043 0310 	orr.w	r3, r3, #16
 8001130:	6193      	str	r3, [r2, #24]

	  // read back adc oncfig

	  if (readback){
 8001132:	78fb      	ldrb	r3, [r7, #3]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d02c      	beq.n	8001192 <Configure_MCP3561R+0xb2>
		  dataTx[0] = 0x47; //01 0001 11 - command byte: read starting at config0
 8001138:	4b18      	ldr	r3, [pc, #96]	; (800119c <Configure_MCP3561R+0xbc>)
 800113a:	2247      	movs	r2, #71	; 0x47
 800113c:	701a      	strb	r2, [r3, #0]

		  SPI_Communicate(dataTx, dataRx, 7);
 800113e:	2207      	movs	r2, #7
 8001140:	4917      	ldr	r1, [pc, #92]	; (80011a0 <Configure_MCP3561R+0xc0>)
 8001142:	4816      	ldr	r0, [pc, #88]	; (800119c <Configure_MCP3561R+0xbc>)
 8001144:	f7ff fb32 	bl	80007ac <SPI_Communicate>

		  HAL_Delay(100);
 8001148:	2064      	movs	r0, #100	; 0x64
 800114a:	f000 fa93 	bl	8001674 <HAL_Delay>

		  GPIOA->BSRR |= (GPIO_BSRR_BS4);
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <Configure_MCP3561R+0xc4>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <Configure_MCP3561R+0xc4>)
 8001154:	f043 0310 	orr.w	r3, r3, #16
 8001158:	6193      	str	r3, [r2, #24]

		  for (int i = 0; i < 7; i++){
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	e015      	b.n	800118c <Configure_MCP3561R+0xac>
			  while(!UART_Buffer_Is_Free());
 8001160:	bf00      	nop
 8001162:	f7ff fbd7 	bl	8000914 <UART_Buffer_Is_Free>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0fa      	beq.n	8001162 <Configure_MCP3561R+0x82>

			  sprintf((char*)buffer, "%3x\r\n", dataRx[i]);
 800116c:	4a0c      	ldr	r2, [pc, #48]	; (80011a0 <Configure_MCP3561R+0xc0>)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	4413      	add	r3, r2
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	490c      	ldr	r1, [pc, #48]	; (80011a8 <Configure_MCP3561R+0xc8>)
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f001 fcbb 	bl	8002af4 <siprintf>
			  UART_Transmit(buffer, 5);
 800117e:	2105      	movs	r1, #5
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff fb9f 	bl	80008c4 <UART_Transmit>
		  for (int i = 0; i < 7; i++){
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	3301      	adds	r3, #1
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b06      	cmp	r3, #6
 8001190:	dde6      	ble.n	8001160 <Configure_MCP3561R+0x80>
		  }
	  }
}
 8001192:	bf00      	nop
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200004c0 	.word	0x200004c0
 80011a0:	200004b8 	.word	0x200004b8
 80011a4:	40020000 	.word	0x40020000
 80011a8:	08003384 	.word	0x08003384

080011ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011b0:	b672      	cpsid	i
}
 80011b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <Error_Handler+0x8>
	...

080011b8 <GPIO_Setup>:
 */

#include "peripherals.h"


void GPIO_Setup(void){
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
	 *
	 * Pulse - PD15 - AF2 - TIM4_CH4
	 */

	// GPIO Clock Enable
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIODEN;
 80011bc:	4b26      	ldr	r3, [pc, #152]	; (8001258 <GPIO_Setup+0xa0>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	4a25      	ldr	r2, [pc, #148]	; (8001258 <GPIO_Setup+0xa0>)
 80011c2:	f043 030f 	orr.w	r3, r3, #15
 80011c6:	6313      	str	r3, [r2, #48]	; 0x30

	// Set Port Mode
	//				PA15 - AF            | PA7 - Analog      | PA6 - Analog      | PA5 - Analog      | PA4 - Output
	GPIOA->MODER |= GPIO_MODER_MODER15_1 | GPIO_MODER_MODER7 | GPIO_MODER_MODER6 | GPIO_MODER_MODER5 | GPIO_MODER_MODER4_0;
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <GPIO_Setup+0xa4>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4923      	ldr	r1, [pc, #140]	; (800125c <GPIO_Setup+0xa4>)
 80011ce:	4b24      	ldr	r3, [pc, #144]	; (8001260 <GPIO_Setup+0xa8>)
 80011d0:	4313      	orrs	r3, r2
 80011d2:	600b      	str	r3, [r1, #0]
	//              PB5 - AF            | PB4 - AF            | PB3 - AF
	GPIOB->MODER |= GPIO_MODER_MODER5_1 | GPIO_MODER_MODER4_1 | GPIO_MODER_MODER3_1;
 80011d4:	4b23      	ldr	r3, [pc, #140]	; (8001264 <GPIO_Setup+0xac>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a22      	ldr	r2, [pc, #136]	; (8001264 <GPIO_Setup+0xac>)
 80011da:	f443 6328 	orr.w	r3, r3, #2688	; 0xa80
 80011de:	6013      	str	r3, [r2, #0]
	//				PC7 - AF
	GPIOC->MODER |= GPIO_MODER_MODER7_1;
 80011e0:	4b21      	ldr	r3, [pc, #132]	; (8001268 <GPIO_Setup+0xb0>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a20      	ldr	r2, [pc, #128]	; (8001268 <GPIO_Setup+0xb0>)
 80011e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80011ea:	6013      	str	r3, [r2, #0]
	//				PD15 - AF            | PD9 - AF            | PD0 - AF
	GPIOD->MODER |= GPIO_MODER_MODER15_1 | GPIO_MODER_MODER9_1 | GPIO_MODER_MODER8_1;
 80011ec:	4b1f      	ldr	r3, [pc, #124]	; (800126c <GPIO_Setup+0xb4>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	491e      	ldr	r1, [pc, #120]	; (800126c <GPIO_Setup+0xb4>)
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <GPIO_Setup+0xb8>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	600b      	str	r3, [r1, #0]

	// Set Alternate Function
	//               PA4 - AF5
	GPIOA->AFR[0] |= (5 << GPIO_AFRL_AFRL4_Pos);
 80011f8:	4b18      	ldr	r3, [pc, #96]	; (800125c <GPIO_Setup+0xa4>)
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	4a17      	ldr	r2, [pc, #92]	; (800125c <GPIO_Setup+0xa4>)
 80011fe:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 8001202:	6213      	str	r3, [r2, #32]
	//               PA15 - AF1
	GPIOA->AFR[1] |= (1 << GPIO_AFRH_AFRH7_Pos);
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <GPIO_Setup+0xa4>)
 8001206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001208:	4a14      	ldr	r2, [pc, #80]	; (800125c <GPIO_Setup+0xa4>)
 800120a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120e:	6253      	str	r3, [r2, #36]	; 0x24
	//               PB5 - AF5                  | PB4 - AF5                  | PB3 - AF5
	GPIOB->AFR[0] |= (5 << GPIO_AFRL_AFRL5_Pos) | (5 << GPIO_AFRL_AFRL4_Pos) | (5 << GPIO_AFRL_AFRL3_Pos);
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <GPIO_Setup+0xac>)
 8001212:	6a1a      	ldr	r2, [r3, #32]
 8001214:	4913      	ldr	r1, [pc, #76]	; (8001264 <GPIO_Setup+0xac>)
 8001216:	4b17      	ldr	r3, [pc, #92]	; (8001274 <GPIO_Setup+0xbc>)
 8001218:	4313      	orrs	r3, r2
 800121a:	620b      	str	r3, [r1, #32]
	//               PC7 - AF2
	GPIOC->AFR[0] |= (2 << GPIO_AFRL_AFRL7_Pos);
 800121c:	4b12      	ldr	r3, [pc, #72]	; (8001268 <GPIO_Setup+0xb0>)
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	4a11      	ldr	r2, [pc, #68]	; (8001268 <GPIO_Setup+0xb0>)
 8001222:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001226:	6213      	str	r3, [r2, #32]
	//               PD15 - AF2                 | PD9 - AF7                  | PD8 - AF7
	GPIOD->AFR[1] |= (2 << GPIO_AFRH_AFRH7_Pos) | (7 << GPIO_AFRH_AFRH1_Pos) | (7 << GPIO_AFRH_AFRH0_Pos);
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <GPIO_Setup+0xb4>)
 800122a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800122c:	490f      	ldr	r1, [pc, #60]	; (800126c <GPIO_Setup+0xb4>)
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <GPIO_Setup+0xc0>)
 8001230:	4313      	orrs	r3, r2
 8001232:	624b      	str	r3, [r1, #36]	; 0x24
	//               PB5 - Open Drain | PB4 - Open Drain | PB3 - Open Drain
//	GPIOB->OTYPER |= GPIO_OTYPER_OT5  | GPIO_OTYPER_OT4  | GPIO_OTYPER_OT3;

	// Set Output Speed
	//                PB5 - Very high speed | PB4 - Very high speed | PB3 - Very high speed
	GPIOB->OSPEEDR |= GPIO_OSPEEDR_OSPEEDR5 | GPIO_OSPEEDR_OSPEEDR4 | GPIO_OSPEEDR_OSPEEDR3;
 8001234:	4b0b      	ldr	r3, [pc, #44]	; (8001264 <GPIO_Setup+0xac>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <GPIO_Setup+0xac>)
 800123a:	f443 637c 	orr.w	r3, r3, #4032	; 0xfc0
 800123e:	6093      	str	r3, [r2, #8]
	// Set Pull-up/pull-down
	//              PB5 - Pull-up       | PB4 - Pull-up       | PB3 - Pull-up
//	GPIOB->PUPDR |= GPIO_PUPDR_PUPDR5_0 | GPIO_PUPDR_PUPDR4_0 | GPIO_PUPDR_PUPDR3_0;

	// SS high
	GPIOA->BSRR |= (GPIO_BSRR_BS4);
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <GPIO_Setup+0xa4>)
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	4a05      	ldr	r2, [pc, #20]	; (800125c <GPIO_Setup+0xa4>)
 8001246:	f043 0310 	orr.w	r3, r3, #16
 800124a:	6193      	str	r3, [r2, #24]

}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40023800 	.word	0x40023800
 800125c:	40020000 	.word	0x40020000
 8001260:	8000fd00 	.word	0x8000fd00
 8001264:	40020400 	.word	0x40020400
 8001268:	40020800 	.word	0x40020800
 800126c:	40020c00 	.word	0x40020c00
 8001270:	800a0000 	.word	0x800a0000
 8001274:	00555000 	.word	0x00555000
 8001278:	20000077 	.word	0x20000077

0800127c <TIMER4_Setup>:




// Pulse LED
void TIMER4_Setup(void){
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
	// Timer4 Clock Enable
	RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <TIMER4_Setup+0x64>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001284:	4a16      	ldr	r2, [pc, #88]	; (80012e0 <TIMER4_Setup+0x64>)
 8001286:	f043 0304 	orr.w	r3, r3, #4
 800128a:	6413      	str	r3, [r2, #64]	; 0x40

	// frequency = CLK/(PSC + 1)/(ARR + 1)
	//Duty_Cycle = CCR1/(ARR + 1);
	TIM4->PSC = 9600-1;
 800128c:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <TIMER4_Setup+0x68>)
 800128e:	f242 527f 	movw	r2, #9599	; 0x257f
 8001292:	629a      	str	r2, [r3, #40]	; 0x28
	TIM4->ARR = 10000-1;
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <TIMER4_Setup+0x68>)
 8001296:	f242 720f 	movw	r2, #9999	; 0x270f
 800129a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CCR4 = 5000;
 800129c:	4b11      	ldr	r3, [pc, #68]	; (80012e4 <TIMER4_Setup+0x68>)
 800129e:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a2:	641a      	str	r2, [r3, #64]	; 0x40

	// Update registers
	TIM4->EGR |= TIM_EGR_UG;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <TIMER4_Setup+0x68>)
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <TIMER4_Setup+0x68>)
 80012aa:	f043 0301 	orr.w	r3, r3, #1
 80012ae:	6153      	str	r3, [r2, #20]

	//             Enable PWM Mode 1            | Enable CCR4 preload register
	TIM4->CCMR2 |= (0x06 << TIM_CCMR2_OC4M_Pos) | TIM_CCMR2_OC4PE; //
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <TIMER4_Setup+0x68>)
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <TIMER4_Setup+0x68>)
 80012b6:	f443 43d0 	orr.w	r3, r3, #26624	; 0x6800
 80012ba:	61d3      	str	r3, [r2, #28]

	//           ARR preload  | enable counter
	TIM4->CR1 |= TIM_CR1_ARPE | TIM_CR1_CEN;
 80012bc:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <TIMER4_Setup+0x68>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a08      	ldr	r2, [pc, #32]	; (80012e4 <TIMER4_Setup+0x68>)
 80012c2:	f043 0381 	orr.w	r3, r3, #129	; 0x81
 80012c6:	6013      	str	r3, [r2, #0]

	//            Output on CH4
	TIM4->CCER |= TIM_CCER_CC4E;
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <TIMER4_Setup+0x68>)
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <TIMER4_Setup+0x68>)
 80012ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012d2:	6213      	str	r3, [r2, #32]

//	TIM4->BDTR |= TIM_BDTR_MOE;
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40000800 	.word	0x40000800

080012e8 <TIMER5_Setup>:


// LFO Prescaler
void TIMER5_Setup(void){
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
	// Timer5  Clock Enable
	RCC->APB1ENR |= RCC_APB1ENR_TIM5EN;
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <TIMER5_Setup+0x40>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <TIMER5_Setup+0x40>)
 80012f2:	f043 0308 	orr.w	r3, r3, #8
 80012f6:	6413      	str	r3, [r2, #64]	; 0x40

	// update event at 2khz
	TIM5->PSC = 96-1;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <TIMER5_Setup+0x44>)
 80012fa:	225f      	movs	r2, #95	; 0x5f
 80012fc:	629a      	str	r2, [r3, #40]	; 0x28
	TIM5->ARR = 500-1;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <TIMER5_Setup+0x44>)
 8001300:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001304:	62da      	str	r2, [r3, #44]	; 0x2c

	//           update as TRGO
	TIM5->CR2 |= (2 << TIM_CR2_MMS_Pos);
 8001306:	4b09      	ldr	r3, [pc, #36]	; (800132c <TIMER5_Setup+0x44>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4a08      	ldr	r2, [pc, #32]	; (800132c <TIMER5_Setup+0x44>)
 800130c:	f043 0320 	orr.w	r3, r3, #32
 8001310:	6053      	str	r3, [r2, #4]

	//           enable timer
	TIM5->CR1 |= TIM_CR1_CEN;
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <TIMER5_Setup+0x44>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <TIMER5_Setup+0x44>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6013      	str	r3, [r2, #0]
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	40023800 	.word	0x40023800
 800132c:	40000c00 	.word	0x40000c00

08001330 <TIMER6_Setup>:


// Sampling timer
void TIMER6_Setup(void){
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
	// Timer6  Clock Enable
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <TIMER6_Setup+0x40>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	4a0d      	ldr	r2, [pc, #52]	; (8001370 <TIMER6_Setup+0x40>)
 800133a:	f043 0310 	orr.w	r3, r3, #16
 800133e:	6413      	str	r3, [r2, #64]	; 0x40

	// f = 32khz
	TIM6->PSC = 2-1;
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <TIMER6_Setup+0x44>)
 8001342:	2201      	movs	r2, #1
 8001344:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR = 1500-1;
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <TIMER6_Setup+0x44>)
 8001348:	f240 52db 	movw	r2, #1499	; 0x5db
 800134c:	62da      	str	r2, [r3, #44]	; 0x2c

	//           update as TRGO
	TIM6->CR2 |= (2 << TIM_CR2_MMS_Pos);
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <TIMER6_Setup+0x44>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	4a08      	ldr	r2, [pc, #32]	; (8001374 <TIMER6_Setup+0x44>)
 8001354:	f043 0320 	orr.w	r3, r3, #32
 8001358:	6053      	str	r3, [r2, #4]

	//           enable timer
	TIM6->CR1 |= TIM_CR1_CEN;
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <TIMER6_Setup+0x44>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a05      	ldr	r2, [pc, #20]	; (8001374 <TIMER6_Setup+0x44>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	6013      	str	r3, [r2, #0]

}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	40023800 	.word	0x40023800
 8001374:	40001000 	.word	0x40001000

08001378 <TIMER12_Setup>:

// LFO for effects - count value is index for sin lookup table
void TIMER12_Setup(void){
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
	// Timer9  Clock Enable
	RCC->APB1ENR |= RCC_APB1ENR_TIM12EN;
 800137c:	4b0e      	ldr	r3, [pc, #56]	; (80013b8 <TIMER12_Setup+0x40>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	4a0d      	ldr	r2, [pc, #52]	; (80013b8 <TIMER12_Setup+0x40>)
 8001382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001386:	6413      	str	r3, [r2, #64]	; 0x40

	TIM12->ARR = 255;
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <TIMER12_Setup+0x44>)
 800138a:	22ff      	movs	r2, #255	; 0xff
 800138c:	62da      	str	r2, [r3, #44]	; 0x2c

	// TIM5 used as a clock source (2 khz)
	//             timer 10 TRGI          | external clock mode
	TIM12->SMCR |= (1 << TIM_SMCR_TS_Pos) | (7 << TIM_SMCR_SMS_Pos);
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <TIMER12_Setup+0x44>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	4a0a      	ldr	r2, [pc, #40]	; (80013bc <TIMER12_Setup+0x44>)
 8001394:	f043 0317 	orr.w	r3, r3, #23
 8001398:	6093      	str	r3, [r2, #8]


	TIM12->PSC = 6;
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <TIMER12_Setup+0x44>)
 800139c:	2206      	movs	r2, #6
 800139e:	629a      	str	r2, [r3, #40]	; 0x28

	//           enable timer
	TIM12->CR1 |= TIM_CR1_CEN;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <TIMER12_Setup+0x44>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a05      	ldr	r2, [pc, #20]	; (80013bc <TIMER12_Setup+0x44>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40001800 	.word	0x40001800

080013c0 <ADC_Setup>:

void ADC_Setup(void){
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
	// ADC  Clock Enable
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80013c4:	4b19      	ldr	r3, [pc, #100]	; (800142c <ADC_Setup+0x6c>)
 80013c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c8:	4a18      	ldr	r2, [pc, #96]	; (800142c <ADC_Setup+0x6c>)
 80013ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ce:	6453      	str	r3, [r2, #68]	; 0x44

	//          /4 prescaler for adc clock
	ADC->CCR |= ADC_CCR_ADCPRE_0;
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <ADC_Setup+0x70>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	4a16      	ldr	r2, [pc, #88]	; (8001430 <ADC_Setup+0x70>)
 80013d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013da:	6053      	str	r3, [r2, #4]

	//           start adc
	ADC1->CR2 |= ADC_CR2_ADON;
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <ADC_Setup+0x74>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	4a14      	ldr	r2, [pc, #80]	; (8001434 <ADC_Setup+0x74>)
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	6093      	str	r3, [r2, #8]

	 //           Hardware trigger | external trigger TIM6 TRGO   | left align    | power on ADC1
	ADC1->CR2 |=  ADC_CR2_EXTEN_0  | (0x0D << ADC_CR2_EXTSEL_Pos) | ADC_CR2_ALIGN;// |  ADC_CR2_ADON;
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <ADC_Setup+0x74>)
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	4911      	ldr	r1, [pc, #68]	; (8001434 <ADC_Setup+0x74>)
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <ADC_Setup+0x78>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	608b      	str	r3, [r1, #8]

	//             1 conversions
	ADC1->SQR1 |= ((1 - 1) << ADC_SQR1_L_Pos);
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <ADC_Setup+0x74>)
 80013f6:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <ADC_Setup+0x74>)
 80013f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fa:	62d3      	str	r3, [r2, #44]	; 0x2c
	//            conversion 1: ADC5: PA5
	ADC1->SQR3 |= (5 << ADC_SQR3_SQ1_Pos);
 80013fc:	4b0d      	ldr	r3, [pc, #52]	; (8001434 <ADC_Setup+0x74>)
 80013fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001400:	4a0c      	ldr	r2, [pc, #48]	; (8001434 <ADC_Setup+0x74>)
 8001402:	f043 0305 	orr.w	r3, r3, #5
 8001406:	6353      	str	r3, [r2, #52]	; 0x34

	//             28 cycles ADC5
	ADC1->SMPR1 |= (2 << ADC_SMPR2_SMP5_Pos);
 8001408:	4b0a      	ldr	r3, [pc, #40]	; (8001434 <ADC_Setup+0x74>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	4a09      	ldr	r2, [pc, #36]	; (8001434 <ADC_Setup+0x74>)
 800140e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001412:	60d3      	str	r3, [r2, #12]

//	//            circular more   | DMA enable
//	ADC1->CFGR |=  |  | ADC_CFGR_DMACFG | ADC_CFGR_DMAEN;

	//           Start ADC Conversion
	ADC1->CR2 |= ADC_CR2_SWSTART;
 8001414:	4b07      	ldr	r3, [pc, #28]	; (8001434 <ADC_Setup+0x74>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	4a06      	ldr	r2, [pc, #24]	; (8001434 <ADC_Setup+0x74>)
 800141a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800141e:	6093      	str	r3, [r2, #8]
//	//           Start ADC Conversion
//	ADC2->CR2 |= ADC_CR2_SWSTART;
//
//
//	ADC_DMA_Setup();
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800
 8001430:	40012300 	.word	0x40012300
 8001434:	40012000 	.word	0x40012000
 8001438:	1d000800 	.word	0x1d000800

0800143c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <HAL_MspInit+0x44>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a0e      	ldr	r2, [pc, #56]	; (8001480 <HAL_MspInit+0x44>)
 8001448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
 800144e:	4b0c      	ldr	r3, [pc, #48]	; (8001480 <HAL_MspInit+0x44>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_MspInit+0x44>)
 800145c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800145e:	4a08      	ldr	r2, [pc, #32]	; (8001480 <HAL_MspInit+0x44>)
 8001460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001464:	6453      	str	r3, [r2, #68]	; 0x44
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_MspInit+0x44>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146e:	603b      	str	r3, [r7, #0]
 8001470:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800

08001484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001488:	e7fe      	b.n	8001488 <NMI_Handler+0x4>

0800148a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148e:	e7fe      	b.n	800148e <HardFault_Handler+0x4>

08001490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <MemManage_Handler+0x4>

08001496 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <BusFault_Handler+0x4>

0800149c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <UsageFault_Handler+0x4>

080014a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d0:	f000 f8b0 	bl	8001634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014e0:	4a14      	ldr	r2, [pc, #80]	; (8001534 <_sbrk+0x5c>)
 80014e2:	4b15      	ldr	r3, [pc, #84]	; (8001538 <_sbrk+0x60>)
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014ec:	4b13      	ldr	r3, [pc, #76]	; (800153c <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d102      	bne.n	80014fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <_sbrk+0x64>)
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <_sbrk+0x68>)
 80014f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	429a      	cmp	r2, r3
 8001506:	d207      	bcs.n	8001518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001508:	f001 fac2 	bl	8002a90 <__errno>
 800150c:	4603      	mov	r3, r0
 800150e:	220c      	movs	r2, #12
 8001510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001516:	e009      	b.n	800152c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001518:	4b08      	ldr	r3, [pc, #32]	; (800153c <_sbrk+0x64>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <_sbrk+0x64>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	4a05      	ldr	r2, [pc, #20]	; (800153c <_sbrk+0x64>)
 8001528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800152a:	68fb      	ldr	r3, [r7, #12]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20080000 	.word	0x20080000
 8001538:	00000400 	.word	0x00000400
 800153c:	200004a0 	.word	0x200004a0
 8001540:	20013d78 	.word	0x20013d78

08001544 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <SystemInit+0x20>)
 800154a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800154e:	4a05      	ldr	r2, [pc, #20]	; (8001564 <SystemInit+0x20>)
 8001550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800156c:	480d      	ldr	r0, [pc, #52]	; (80015a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800156e:	490e      	ldr	r1, [pc, #56]	; (80015a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001570:	4a0e      	ldr	r2, [pc, #56]	; (80015ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001574:	e002      	b.n	800157c <LoopCopyDataInit>

08001576 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001576:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001578:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157a:	3304      	adds	r3, #4

0800157c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800157c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800157e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001580:	d3f9      	bcc.n	8001576 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001582:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001584:	4c0b      	ldr	r4, [pc, #44]	; (80015b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001588:	e001      	b.n	800158e <LoopFillZerobss>

0800158a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800158c:	3204      	adds	r2, #4

0800158e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800158e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001590:	d3fb      	bcc.n	800158a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001592:	f7ff ffd7 	bl	8001544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001596:	f001 fa81 	bl	8002a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800159a:	f7ff f9cd 	bl	8000938 <main>
  bx  lr    
 800159e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015a0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80015a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a8:	20000480 	.word	0x20000480
  ldr r2, =_sidata
 80015ac:	080033e0 	.word	0x080033e0
  ldr r2, =_sbss
 80015b0:	20000480 	.word	0x20000480
  ldr r4, =_ebss
 80015b4:	20013d74 	.word	0x20013d74

080015b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC_IRQHandler>

080015ba <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015be:	2003      	movs	r0, #3
 80015c0:	f000 f92e 	bl	8001820 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c4:	2000      	movs	r0, #0
 80015c6:	f000 f805 	bl	80015d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ca:	f7ff ff37 	bl	800143c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015dc:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_InitTick+0x54>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_InitTick+0x58>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f93b 	bl	800186e <HAL_SYSTICK_Config>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e00e      	b.n	8001620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b0f      	cmp	r3, #15
 8001606:	d80a      	bhi.n	800161e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001608:	2200      	movs	r2, #0
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001610:	f000 f911 	bl	8001836 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001614:	4a06      	ldr	r2, [pc, #24]	; (8001630 <HAL_InitTick+0x5c>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	e000      	b.n	8001620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000410 	.word	0x20000410
 800162c:	20000418 	.word	0x20000418
 8001630:	20000414 	.word	0x20000414

08001634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_IncTick+0x20>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4b06      	ldr	r3, [pc, #24]	; (8001658 <HAL_IncTick+0x24>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4413      	add	r3, r2
 8001644:	4a04      	ldr	r2, [pc, #16]	; (8001658 <HAL_IncTick+0x24>)
 8001646:	6013      	str	r3, [r2, #0]
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000418 	.word	0x20000418
 8001658:	20013d60 	.word	0x20013d60

0800165c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return uwTick;
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <HAL_GetTick+0x14>)
 8001662:	681b      	ldr	r3, [r3, #0]
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	20013d60 	.word	0x20013d60

08001674 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800167c:	f7ff ffee 	bl	800165c <HAL_GetTick>
 8001680:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800168c:	d005      	beq.n	800169a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800168e:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <HAL_Delay+0x44>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	461a      	mov	r2, r3
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4413      	add	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800169a:	bf00      	nop
 800169c:	f7ff ffde 	bl	800165c <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	68fa      	ldr	r2, [r7, #12]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d8f7      	bhi.n	800169c <HAL_Delay+0x28>
  {
  }
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000418 	.word	0x20000418

080016bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <__NVIC_SetPriorityGrouping+0x40>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016d2:	68ba      	ldr	r2, [r7, #8]
 80016d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016d8:	4013      	ands	r3, r2
 80016da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <__NVIC_SetPriorityGrouping+0x44>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ea:	4a04      	ldr	r2, [pc, #16]	; (80016fc <__NVIC_SetPriorityGrouping+0x40>)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	60d3      	str	r3, [r2, #12]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000ed00 	.word	0xe000ed00
 8001700:	05fa0000 	.word	0x05fa0000

08001704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <__NVIC_GetPriorityGrouping+0x18>)
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	0a1b      	lsrs	r3, r3, #8
 800170e:	f003 0307 	and.w	r3, r3, #7
}
 8001712:	4618      	mov	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	6039      	str	r1, [r7, #0]
 800172a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800172c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001730:	2b00      	cmp	r3, #0
 8001732:	db0a      	blt.n	800174a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	b2da      	uxtb	r2, r3
 8001738:	490c      	ldr	r1, [pc, #48]	; (800176c <__NVIC_SetPriority+0x4c>)
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	0112      	lsls	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	440b      	add	r3, r1
 8001744:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001748:	e00a      	b.n	8001760 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4908      	ldr	r1, [pc, #32]	; (8001770 <__NVIC_SetPriority+0x50>)
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	3b04      	subs	r3, #4
 8001758:	0112      	lsls	r2, r2, #4
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	440b      	add	r3, r1
 800175e:	761a      	strb	r2, [r3, #24]
}
 8001760:	bf00      	nop
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000e100 	.word	0xe000e100
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001774:	b480      	push	{r7}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	f1c3 0307 	rsb	r3, r3, #7
 800178e:	2b04      	cmp	r3, #4
 8001790:	bf28      	it	cs
 8001792:	2304      	movcs	r3, #4
 8001794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3304      	adds	r3, #4
 800179a:	2b06      	cmp	r3, #6
 800179c:	d902      	bls.n	80017a4 <NVIC_EncodePriority+0x30>
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3b03      	subs	r3, #3
 80017a2:	e000      	b.n	80017a6 <NVIC_EncodePriority+0x32>
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	401a      	ands	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	fa01 f303 	lsl.w	r3, r1, r3
 80017c6:	43d9      	mvns	r1, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	4313      	orrs	r3, r2
         );
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3724      	adds	r7, #36	; 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3b01      	subs	r3, #1
 80017e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017ec:	d301      	bcc.n	80017f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00f      	b.n	8001812 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017f2:	4a0a      	ldr	r2, [pc, #40]	; (800181c <SysTick_Config+0x40>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017fa:	210f      	movs	r1, #15
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001800:	f7ff ff8e 	bl	8001720 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <SysTick_Config+0x40>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800180a:	4b04      	ldr	r3, [pc, #16]	; (800181c <SysTick_Config+0x40>)
 800180c:	2207      	movs	r2, #7
 800180e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	e000e010 	.word	0xe000e010

08001820 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7ff ff47 	bl	80016bc <__NVIC_SetPriorityGrouping>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
 8001842:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001848:	f7ff ff5c 	bl	8001704 <__NVIC_GetPriorityGrouping>
 800184c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	68b9      	ldr	r1, [r7, #8]
 8001852:	6978      	ldr	r0, [r7, #20]
 8001854:	f7ff ff8e 	bl	8001774 <NVIC_EncodePriority>
 8001858:	4602      	mov	r2, r0
 800185a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff ff5d 	bl	8001720 <__NVIC_SetPriority>
}
 8001866:	bf00      	nop
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffb0 	bl	80017dc <SysTick_Config>
 800187c:	4603      	mov	r3, r0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001896:	6013      	str	r3, [r2, #0]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40007000 	.word	0x40007000

080018a8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80018b2:	4b23      	ldr	r3, [pc, #140]	; (8001940 <HAL_PWREx_EnableOverDrive+0x98>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	4a22      	ldr	r2, [pc, #136]	; (8001940 <HAL_PWREx_EnableOverDrive+0x98>)
 80018b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018bc:	6413      	str	r3, [r2, #64]	; 0x40
 80018be:	4b20      	ldr	r3, [pc, #128]	; (8001940 <HAL_PWREx_EnableOverDrive+0x98>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	603b      	str	r3, [r7, #0]
 80018c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80018ca:	4b1e      	ldr	r3, [pc, #120]	; (8001944 <HAL_PWREx_EnableOverDrive+0x9c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a1d      	ldr	r2, [pc, #116]	; (8001944 <HAL_PWREx_EnableOverDrive+0x9c>)
 80018d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018d6:	f7ff fec1 	bl	800165c <HAL_GetTick>
 80018da:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018dc:	e009      	b.n	80018f2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018de:	f7ff febd 	bl	800165c <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018ec:	d901      	bls.n	80018f2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e022      	b.n	8001938 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018f2:	4b14      	ldr	r3, [pc, #80]	; (8001944 <HAL_PWREx_EnableOverDrive+0x9c>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018fe:	d1ee      	bne.n	80018de <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001900:	4b10      	ldr	r3, [pc, #64]	; (8001944 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0f      	ldr	r2, [pc, #60]	; (8001944 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800190a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800190c:	f7ff fea6 	bl	800165c <HAL_GetTick>
 8001910:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001912:	e009      	b.n	8001928 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001914:	f7ff fea2 	bl	800165c <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001922:	d901      	bls.n	8001928 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e007      	b.n	8001938 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_PWREx_EnableOverDrive+0x9c>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001930:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001934:	d1ee      	bne.n	8001914 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001936:	2300      	movs	r3, #0
}
 8001938:	4618      	mov	r0, r3
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40023800 	.word	0x40023800
 8001944:	40007000 	.word	0x40007000

08001948 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001950:	2300      	movs	r3, #0
 8001952:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e29b      	b.n	8001e96 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	f000 8087 	beq.w	8001a7a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800196c:	4b96      	ldr	r3, [pc, #600]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 030c 	and.w	r3, r3, #12
 8001974:	2b04      	cmp	r3, #4
 8001976:	d00c      	beq.n	8001992 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001978:	4b93      	ldr	r3, [pc, #588]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f003 030c 	and.w	r3, r3, #12
 8001980:	2b08      	cmp	r3, #8
 8001982:	d112      	bne.n	80019aa <HAL_RCC_OscConfig+0x62>
 8001984:	4b90      	ldr	r3, [pc, #576]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001990:	d10b      	bne.n	80019aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001992:	4b8d      	ldr	r3, [pc, #564]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d06c      	beq.n	8001a78 <HAL_RCC_OscConfig+0x130>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d168      	bne.n	8001a78 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e275      	b.n	8001e96 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b2:	d106      	bne.n	80019c2 <HAL_RCC_OscConfig+0x7a>
 80019b4:	4b84      	ldr	r3, [pc, #528]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a83      	ldr	r2, [pc, #524]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 80019ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019be:	6013      	str	r3, [r2, #0]
 80019c0:	e02e      	b.n	8001a20 <HAL_RCC_OscConfig+0xd8>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x9c>
 80019ca:	4b7f      	ldr	r3, [pc, #508]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a7e      	ldr	r2, [pc, #504]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 80019d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b7c      	ldr	r3, [pc, #496]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a7b      	ldr	r2, [pc, #492]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 80019dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e01d      	b.n	8001a20 <HAL_RCC_OscConfig+0xd8>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019ec:	d10c      	bne.n	8001a08 <HAL_RCC_OscConfig+0xc0>
 80019ee:	4b76      	ldr	r3, [pc, #472]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a75      	ldr	r2, [pc, #468]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 80019f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	4b73      	ldr	r3, [pc, #460]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a72      	ldr	r2, [pc, #456]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e00b      	b.n	8001a20 <HAL_RCC_OscConfig+0xd8>
 8001a08:	4b6f      	ldr	r3, [pc, #444]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a6e      	ldr	r2, [pc, #440]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001a0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	4b6c      	ldr	r3, [pc, #432]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a6b      	ldr	r2, [pc, #428]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001a1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d013      	beq.n	8001a50 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a28:	f7ff fe18 	bl	800165c <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a30:	f7ff fe14 	bl	800165c <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b64      	cmp	r3, #100	; 0x64
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e229      	b.n	8001e96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	4b61      	ldr	r3, [pc, #388]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0f0      	beq.n	8001a30 <HAL_RCC_OscConfig+0xe8>
 8001a4e:	e014      	b.n	8001a7a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff fe04 	bl	800165c <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a58:	f7ff fe00 	bl	800165c <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b64      	cmp	r3, #100	; 0x64
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e215      	b.n	8001e96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6a:	4b57      	ldr	r3, [pc, #348]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x110>
 8001a76:	e000      	b.n	8001a7a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d069      	beq.n	8001b5a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a86:	4b50      	ldr	r3, [pc, #320]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d00b      	beq.n	8001aaa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a92:	4b4d      	ldr	r3, [pc, #308]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	2b08      	cmp	r3, #8
 8001a9c:	d11c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x190>
 8001a9e:	4b4a      	ldr	r3, [pc, #296]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d116      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aaa:	4b47      	ldr	r3, [pc, #284]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d005      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x17a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d001      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e1e9      	b.n	8001e96 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac2:	4b41      	ldr	r3, [pc, #260]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	493d      	ldr	r1, [pc, #244]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad6:	e040      	b.n	8001b5a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d023      	beq.n	8001b28 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae0:	4b39      	ldr	r3, [pc, #228]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a38      	ldr	r2, [pc, #224]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aec:	f7ff fdb6 	bl	800165c <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af4:	f7ff fdb2 	bl	800165c <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e1c7      	b.n	8001e96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b06:	4b30      	ldr	r3, [pc, #192]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b12:	4b2d      	ldr	r3, [pc, #180]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	00db      	lsls	r3, r3, #3
 8001b20:	4929      	ldr	r1, [pc, #164]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	600b      	str	r3, [r1, #0]
 8001b26:	e018      	b.n	8001b5a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b28:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a26      	ldr	r2, [pc, #152]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001b2e:	f023 0301 	bic.w	r3, r3, #1
 8001b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff fd92 	bl	800165c <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b3c:	f7ff fd8e 	bl	800165c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e1a3      	b.n	8001e96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1f0      	bne.n	8001b3c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d038      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	695b      	ldr	r3, [r3, #20]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d019      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b6e:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b72:	4a15      	ldr	r2, [pc, #84]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001b74:	f043 0301 	orr.w	r3, r3, #1
 8001b78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b7a:	f7ff fd6f 	bl	800165c <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b82:	f7ff fd6b 	bl	800165c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e180      	b.n	8001e96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x23a>
 8001ba0:	e01a      	b.n	8001bd8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba6:	4a08      	ldr	r2, [pc, #32]	; (8001bc8 <HAL_RCC_OscConfig+0x280>)
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bae:	f7ff fd55 	bl	800165c <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb4:	e00a      	b.n	8001bcc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb6:	f7ff fd51 	bl	800165c <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d903      	bls.n	8001bcc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e166      	b.n	8001e96 <HAL_RCC_OscConfig+0x54e>
 8001bc8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bcc:	4b92      	ldr	r3, [pc, #584]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd0:	f003 0302 	and.w	r3, r3, #2
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d1ee      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80a4 	beq.w	8001d2e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001be6:	4b8c      	ldr	r3, [pc, #560]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10d      	bne.n	8001c0e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	4b89      	ldr	r3, [pc, #548]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	4a88      	ldr	r2, [pc, #544]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfe:	4b86      	ldr	r3, [pc, #536]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c0e:	4b83      	ldr	r3, [pc, #524]	; (8001e1c <HAL_RCC_OscConfig+0x4d4>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d118      	bne.n	8001c4c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c1a:	4b80      	ldr	r3, [pc, #512]	; (8001e1c <HAL_RCC_OscConfig+0x4d4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a7f      	ldr	r2, [pc, #508]	; (8001e1c <HAL_RCC_OscConfig+0x4d4>)
 8001c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c26:	f7ff fd19 	bl	800165c <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2e:	f7ff fd15 	bl	800165c <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b64      	cmp	r3, #100	; 0x64
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e12a      	b.n	8001e96 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c40:	4b76      	ldr	r3, [pc, #472]	; (8001e1c <HAL_RCC_OscConfig+0x4d4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d106      	bne.n	8001c62 <HAL_RCC_OscConfig+0x31a>
 8001c54:	4b70      	ldr	r3, [pc, #448]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c58:	4a6f      	ldr	r2, [pc, #444]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c60:	e02d      	b.n	8001cbe <HAL_RCC_OscConfig+0x376>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10c      	bne.n	8001c84 <HAL_RCC_OscConfig+0x33c>
 8001c6a:	4b6b      	ldr	r3, [pc, #428]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6e:	4a6a      	ldr	r2, [pc, #424]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	6713      	str	r3, [r2, #112]	; 0x70
 8001c76:	4b68      	ldr	r3, [pc, #416]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7a:	4a67      	ldr	r2, [pc, #412]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001c7c:	f023 0304 	bic.w	r3, r3, #4
 8001c80:	6713      	str	r3, [r2, #112]	; 0x70
 8001c82:	e01c      	b.n	8001cbe <HAL_RCC_OscConfig+0x376>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	d10c      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x35e>
 8001c8c:	4b62      	ldr	r3, [pc, #392]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c90:	4a61      	ldr	r2, [pc, #388]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	6713      	str	r3, [r2, #112]	; 0x70
 8001c98:	4b5f      	ldr	r3, [pc, #380]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9c:	4a5e      	ldr	r2, [pc, #376]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ca4:	e00b      	b.n	8001cbe <HAL_RCC_OscConfig+0x376>
 8001ca6:	4b5c      	ldr	r3, [pc, #368]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001caa:	4a5b      	ldr	r2, [pc, #364]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb2:	4b59      	ldr	r3, [pc, #356]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb6:	4a58      	ldr	r2, [pc, #352]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001cb8:	f023 0304 	bic.w	r3, r3, #4
 8001cbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d015      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc6:	f7ff fcc9 	bl	800165c <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cce:	f7ff fcc5 	bl	800165c <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e0d8      	b.n	8001e96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce4:	4b4c      	ldr	r3, [pc, #304]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0ee      	beq.n	8001cce <HAL_RCC_OscConfig+0x386>
 8001cf0:	e014      	b.n	8001d1c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fcb3 	bl	800165c <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7ff fcaf 	bl	800165c <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e0c2      	b.n	8001e96 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d10:	4b41      	ldr	r3, [pc, #260]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1ee      	bne.n	8001cfa <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d1c:	7dfb      	ldrb	r3, [r7, #23]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d105      	bne.n	8001d2e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d22:	4b3d      	ldr	r3, [pc, #244]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	4a3c      	ldr	r2, [pc, #240]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 80ae 	beq.w	8001e94 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d38:	4b37      	ldr	r3, [pc, #220]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d06d      	beq.n	8001e20 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d14b      	bne.n	8001de4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4c:	4b32      	ldr	r3, [pc, #200]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a31      	ldr	r2, [pc, #196]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d58:	f7ff fc80 	bl	800165c <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d60:	f7ff fc7c 	bl	800165c <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e091      	b.n	8001e96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d72:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1f0      	bne.n	8001d60 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	69da      	ldr	r2, [r3, #28]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	019b      	lsls	r3, r3, #6
 8001d8e:	431a      	orrs	r2, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d94:	085b      	lsrs	r3, r3, #1
 8001d96:	3b01      	subs	r3, #1
 8001d98:	041b      	lsls	r3, r3, #16
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da0:	061b      	lsls	r3, r3, #24
 8001da2:	431a      	orrs	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	071b      	lsls	r3, r3, #28
 8001daa:	491b      	ldr	r1, [pc, #108]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001db0:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a18      	ldr	r2, [pc, #96]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fc4e 	bl	800165c <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc4:	f7ff fc4a 	bl	800165c <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e05f      	b.n	8001e96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d0f0      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x47c>
 8001de2:	e057      	b.n	8001e94 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0b      	ldr	r2, [pc, #44]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001dea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7ff fc34 	bl	800165c <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df8:	f7ff fc30 	bl	800165c <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e045      	b.n	8001e96 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0a:	4b03      	ldr	r3, [pc, #12]	; (8001e18 <HAL_RCC_OscConfig+0x4d0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x4b0>
 8001e16:	e03d      	b.n	8001e94 <HAL_RCC_OscConfig+0x54c>
 8001e18:	40023800 	.word	0x40023800
 8001e1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e20:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <HAL_RCC_OscConfig+0x558>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d030      	beq.n	8001e90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d129      	bne.n	8001e90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d122      	bne.n	8001e90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e50:	4013      	ands	r3, r2
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d119      	bne.n	8001e90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	085b      	lsrs	r3, r3, #1
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d10f      	bne.n	8001e90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d107      	bne.n	8001e90 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800

08001ea4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0d0      	b.n	800205e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ebc:	4b6a      	ldr	r3, [pc, #424]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 030f 	and.w	r3, r3, #15
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d910      	bls.n	8001eec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eca:	4b67      	ldr	r3, [pc, #412]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f023 020f 	bic.w	r2, r3, #15
 8001ed2:	4965      	ldr	r1, [pc, #404]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eda:	4b63      	ldr	r3, [pc, #396]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0b8      	b.n	800205e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d020      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0304 	and.w	r3, r3, #4
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f04:	4b59      	ldr	r3, [pc, #356]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	4a58      	ldr	r2, [pc, #352]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8001f0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0308 	and.w	r3, r3, #8
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d005      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f1c:	4b53      	ldr	r3, [pc, #332]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	4a52      	ldr	r2, [pc, #328]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8001f22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f26:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f28:	4b50      	ldr	r3, [pc, #320]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	494d      	ldr	r1, [pc, #308]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d040      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d107      	bne.n	8001f5e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	4b47      	ldr	r3, [pc, #284]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d115      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e07f      	b.n	800205e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d107      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f66:	4b41      	ldr	r3, [pc, #260]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d109      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e073      	b.n	800205e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f76:	4b3d      	ldr	r3, [pc, #244]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e06b      	b.n	800205e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f86:	4b39      	ldr	r3, [pc, #228]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f023 0203 	bic.w	r2, r3, #3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	4936      	ldr	r1, [pc, #216]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f98:	f7ff fb60 	bl	800165c <HAL_GetTick>
 8001f9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9e:	e00a      	b.n	8001fb6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa0:	f7ff fb5c 	bl	800165c <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e053      	b.n	800205e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb6:	4b2d      	ldr	r3, [pc, #180]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	f003 020c 	and.w	r2, r3, #12
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d1eb      	bne.n	8001fa0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc8:	4b27      	ldr	r3, [pc, #156]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d210      	bcs.n	8001ff8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	4b24      	ldr	r3, [pc, #144]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f023 020f 	bic.w	r2, r3, #15
 8001fde:	4922      	ldr	r1, [pc, #136]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe6:	4b20      	ldr	r3, [pc, #128]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	683a      	ldr	r2, [r7, #0]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e032      	b.n	800205e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0304 	and.w	r3, r3, #4
 8002000:	2b00      	cmp	r3, #0
 8002002:	d008      	beq.n	8002016 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002004:	4b19      	ldr	r3, [pc, #100]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	4916      	ldr	r1, [pc, #88]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8002012:	4313      	orrs	r3, r2
 8002014:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d009      	beq.n	8002036 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002022:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	490e      	ldr	r1, [pc, #56]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002036:	f000 f821 	bl	800207c <HAL_RCC_GetSysClockFreq>
 800203a:	4602      	mov	r2, r0
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	490a      	ldr	r1, [pc, #40]	; (8002070 <HAL_RCC_ClockConfig+0x1cc>)
 8002048:	5ccb      	ldrb	r3, [r1, r3]
 800204a:	fa22 f303 	lsr.w	r3, r2, r3
 800204e:	4a09      	ldr	r2, [pc, #36]	; (8002074 <HAL_RCC_ClockConfig+0x1d0>)
 8002050:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_RCC_ClockConfig+0x1d4>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fabc 	bl	80015d4 <HAL_InitTick>

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40023c00 	.word	0x40023c00
 800206c:	40023800 	.word	0x40023800
 8002070:	0800338c 	.word	0x0800338c
 8002074:	20000410 	.word	0x20000410
 8002078:	20000414 	.word	0x20000414

0800207c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800207c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002080:	b084      	sub	sp, #16
 8002082:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002084:	2300      	movs	r3, #0
 8002086:	607b      	str	r3, [r7, #4]
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	2300      	movs	r3, #0
 800208e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002094:	4b67      	ldr	r3, [pc, #412]	; (8002234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f003 030c 	and.w	r3, r3, #12
 800209c:	2b08      	cmp	r3, #8
 800209e:	d00d      	beq.n	80020bc <HAL_RCC_GetSysClockFreq+0x40>
 80020a0:	2b08      	cmp	r3, #8
 80020a2:	f200 80bd 	bhi.w	8002220 <HAL_RCC_GetSysClockFreq+0x1a4>
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <HAL_RCC_GetSysClockFreq+0x34>
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d003      	beq.n	80020b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80020ae:	e0b7      	b.n	8002220 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020b0:	4b61      	ldr	r3, [pc, #388]	; (8002238 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80020b2:	60bb      	str	r3, [r7, #8]
      break;
 80020b4:	e0b7      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020b6:	4b61      	ldr	r3, [pc, #388]	; (800223c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80020b8:	60bb      	str	r3, [r7, #8]
      break;
 80020ba:	e0b4      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020bc:	4b5d      	ldr	r3, [pc, #372]	; (8002234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020c4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80020c6:	4b5b      	ldr	r3, [pc, #364]	; (8002234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d04d      	beq.n	800216e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020d2:	4b58      	ldr	r3, [pc, #352]	; (8002234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	099b      	lsrs	r3, r3, #6
 80020d8:	461a      	mov	r2, r3
 80020da:	f04f 0300 	mov.w	r3, #0
 80020de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80020e2:	f04f 0100 	mov.w	r1, #0
 80020e6:	ea02 0800 	and.w	r8, r2, r0
 80020ea:	ea03 0901 	and.w	r9, r3, r1
 80020ee:	4640      	mov	r0, r8
 80020f0:	4649      	mov	r1, r9
 80020f2:	f04f 0200 	mov.w	r2, #0
 80020f6:	f04f 0300 	mov.w	r3, #0
 80020fa:	014b      	lsls	r3, r1, #5
 80020fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002100:	0142      	lsls	r2, r0, #5
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	ebb0 0008 	subs.w	r0, r0, r8
 800210a:	eb61 0109 	sbc.w	r1, r1, r9
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	018b      	lsls	r3, r1, #6
 8002118:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800211c:	0182      	lsls	r2, r0, #6
 800211e:	1a12      	subs	r2, r2, r0
 8002120:	eb63 0301 	sbc.w	r3, r3, r1
 8002124:	f04f 0000 	mov.w	r0, #0
 8002128:	f04f 0100 	mov.w	r1, #0
 800212c:	00d9      	lsls	r1, r3, #3
 800212e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002132:	00d0      	lsls	r0, r2, #3
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	eb12 0208 	adds.w	r2, r2, r8
 800213c:	eb43 0309 	adc.w	r3, r3, r9
 8002140:	f04f 0000 	mov.w	r0, #0
 8002144:	f04f 0100 	mov.w	r1, #0
 8002148:	0259      	lsls	r1, r3, #9
 800214a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800214e:	0250      	lsls	r0, r2, #9
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	4610      	mov	r0, r2
 8002156:	4619      	mov	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	461a      	mov	r2, r3
 800215c:	f04f 0300 	mov.w	r3, #0
 8002160:	f7fe f8be 	bl	80002e0 <__aeabi_uldivmod>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4613      	mov	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	e04a      	b.n	8002204 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800216e:	4b31      	ldr	r3, [pc, #196]	; (8002234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	099b      	lsrs	r3, r3, #6
 8002174:	461a      	mov	r2, r3
 8002176:	f04f 0300 	mov.w	r3, #0
 800217a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800217e:	f04f 0100 	mov.w	r1, #0
 8002182:	ea02 0400 	and.w	r4, r2, r0
 8002186:	ea03 0501 	and.w	r5, r3, r1
 800218a:	4620      	mov	r0, r4
 800218c:	4629      	mov	r1, r5
 800218e:	f04f 0200 	mov.w	r2, #0
 8002192:	f04f 0300 	mov.w	r3, #0
 8002196:	014b      	lsls	r3, r1, #5
 8002198:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800219c:	0142      	lsls	r2, r0, #5
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	1b00      	subs	r0, r0, r4
 80021a4:	eb61 0105 	sbc.w	r1, r1, r5
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	018b      	lsls	r3, r1, #6
 80021b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021b6:	0182      	lsls	r2, r0, #6
 80021b8:	1a12      	subs	r2, r2, r0
 80021ba:	eb63 0301 	sbc.w	r3, r3, r1
 80021be:	f04f 0000 	mov.w	r0, #0
 80021c2:	f04f 0100 	mov.w	r1, #0
 80021c6:	00d9      	lsls	r1, r3, #3
 80021c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021cc:	00d0      	lsls	r0, r2, #3
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	1912      	adds	r2, r2, r4
 80021d4:	eb45 0303 	adc.w	r3, r5, r3
 80021d8:	f04f 0000 	mov.w	r0, #0
 80021dc:	f04f 0100 	mov.w	r1, #0
 80021e0:	0299      	lsls	r1, r3, #10
 80021e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80021e6:	0290      	lsls	r0, r2, #10
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	461a      	mov	r2, r3
 80021f4:	f04f 0300 	mov.w	r3, #0
 80021f8:	f7fe f872 	bl	80002e0 <__aeabi_uldivmod>
 80021fc:	4602      	mov	r2, r0
 80021fe:	460b      	mov	r3, r1
 8002200:	4613      	mov	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	0c1b      	lsrs	r3, r3, #16
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	3301      	adds	r3, #1
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
 800221c:	60bb      	str	r3, [r7, #8]
      break;
 800221e:	e002      	b.n	8002226 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002220:	4b05      	ldr	r3, [pc, #20]	; (8002238 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002222:	60bb      	str	r3, [r7, #8]
      break;
 8002224:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002226:	68bb      	ldr	r3, [r7, #8]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3710      	adds	r7, #16
 800222c:	46bd      	mov	sp, r7
 800222e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800
 8002238:	00f42400 	.word	0x00f42400
 800223c:	007a1200 	.word	0x007a1200

08002240 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b088      	sub	sp, #32
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800224c:	2300      	movs	r3, #0
 800224e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0301 	and.w	r3, r3, #1
 8002264:	2b00      	cmp	r3, #0
 8002266:	d012      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002268:	4b69      	ldr	r3, [pc, #420]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	4a68      	ldr	r2, [pc, #416]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800226e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002272:	6093      	str	r3, [r2, #8]
 8002274:	4b66      	ldr	r3, [pc, #408]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227c:	4964      	ldr	r1, [pc, #400]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800227e:	4313      	orrs	r3, r2
 8002280:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800228a:	2301      	movs	r3, #1
 800228c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d017      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800229a:	4b5d      	ldr	r3, [pc, #372]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800229c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a8:	4959      	ldr	r1, [pc, #356]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022b8:	d101      	bne.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80022ba:	2301      	movs	r3, #1
 80022bc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80022c6:	2301      	movs	r3, #1
 80022c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d017      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022d6:	4b4e      	ldr	r3, [pc, #312]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	494a      	ldr	r1, [pc, #296]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022f4:	d101      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80022f6:	2301      	movs	r3, #1
 80022f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002302:	2301      	movs	r3, #1
 8002304:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002312:	2301      	movs	r3, #1
 8002314:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0320 	and.w	r3, r3, #32
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 808b 	beq.w	800243a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002324:	4b3a      	ldr	r3, [pc, #232]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002328:	4a39      	ldr	r2, [pc, #228]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800232a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800232e:	6413      	str	r3, [r2, #64]	; 0x40
 8002330:	4b37      	ldr	r3, [pc, #220]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800233c:	4b35      	ldr	r3, [pc, #212]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a34      	ldr	r2, [pc, #208]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002346:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002348:	f7ff f988 	bl	800165c <HAL_GetTick>
 800234c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002350:	f7ff f984 	bl	800165c <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	; 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e38f      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002362:	4b2c      	ldr	r3, [pc, #176]	; (8002414 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800236e:	4b28      	ldr	r3, [pc, #160]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002376:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d035      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	429a      	cmp	r2, r3
 800238a:	d02e      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800238c:	4b20      	ldr	r3, [pc, #128]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800238e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002394:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002396:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239a:	4a1d      	ldr	r2, [pc, #116]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800239c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023a2:	4b1b      	ldr	r3, [pc, #108]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a6:	4a1a      	ldr	r2, [pc, #104]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80023ae:	4a18      	ldr	r2, [pc, #96]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80023b4:	4b16      	ldr	r3, [pc, #88]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d114      	bne.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c0:	f7ff f94c 	bl	800165c <HAL_GetTick>
 80023c4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c6:	e00a      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023c8:	f7ff f948 	bl	800165c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d901      	bls.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e351      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0ee      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80023f6:	d111      	bne.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002406:	400b      	ands	r3, r1
 8002408:	4901      	ldr	r1, [pc, #4]	; (8002410 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800240a:	4313      	orrs	r3, r2
 800240c:	608b      	str	r3, [r1, #8]
 800240e:	e00b      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002410:	40023800 	.word	0x40023800
 8002414:	40007000 	.word	0x40007000
 8002418:	0ffffcff 	.word	0x0ffffcff
 800241c:	4bb3      	ldr	r3, [pc, #716]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4ab2      	ldr	r2, [pc, #712]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002422:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002426:	6093      	str	r3, [r2, #8]
 8002428:	4bb0      	ldr	r3, [pc, #704]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800242a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002434:	49ad      	ldr	r1, [pc, #692]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002436:	4313      	orrs	r3, r2
 8002438:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	2b00      	cmp	r3, #0
 8002444:	d010      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002446:	4ba9      	ldr	r3, [pc, #676]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800244c:	4aa7      	ldr	r2, [pc, #668]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800244e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002452:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002456:	4ba5      	ldr	r3, [pc, #660]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002458:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002460:	49a2      	ldr	r1, [pc, #648]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00a      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002474:	4b9d      	ldr	r3, [pc, #628]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002482:	499a      	ldr	r1, [pc, #616]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002496:	4b95      	ldr	r3, [pc, #596]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80024a4:	4991      	ldr	r1, [pc, #580]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00a      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024b8:	4b8c      	ldr	r3, [pc, #560]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024c6:	4989      	ldr	r1, [pc, #548]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00a      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80024da:	4b84      	ldr	r3, [pc, #528]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	4980      	ldr	r1, [pc, #512]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00a      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024fc:	4b7b      	ldr	r3, [pc, #492]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002502:	f023 0203 	bic.w	r2, r3, #3
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	4978      	ldr	r1, [pc, #480]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800251e:	4b73      	ldr	r3, [pc, #460]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002524:	f023 020c 	bic.w	r2, r3, #12
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252c:	496f      	ldr	r1, [pc, #444]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002540:	4b6a      	ldr	r3, [pc, #424]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002546:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254e:	4967      	ldr	r1, [pc, #412]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002562:	4b62      	ldr	r3, [pc, #392]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002568:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002570:	495e      	ldr	r1, [pc, #376]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002584:	4b59      	ldr	r3, [pc, #356]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002592:	4956      	ldr	r1, [pc, #344]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d00a      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80025a6:	4b51      	ldr	r3, [pc, #324]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b4:	494d      	ldr	r1, [pc, #308]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00a      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80025c8:	4b48      	ldr	r3, [pc, #288]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d6:	4945      	ldr	r1, [pc, #276]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025d8:	4313      	orrs	r3, r2
 80025da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80025ea:	4b40      	ldr	r3, [pc, #256]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f8:	493c      	ldr	r1, [pc, #240]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00a      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800260c:	4b37      	ldr	r3, [pc, #220]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002612:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800261a:	4934      	ldr	r1, [pc, #208]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800261c:	4313      	orrs	r3, r2
 800261e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d011      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800262e:	4b2f      	ldr	r3, [pc, #188]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002634:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800263c:	492b      	ldr	r1, [pc, #172]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800264c:	d101      	bne.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800264e:	2301      	movs	r3, #1
 8002650:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800265e:	2301      	movs	r3, #1
 8002660:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800266e:	4b1f      	ldr	r3, [pc, #124]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002670:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002674:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800267c:	491b      	ldr	r1, [pc, #108]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00b      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002690:	4b16      	ldr	r3, [pc, #88]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002696:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026a0:	4912      	ldr	r1, [pc, #72]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00b      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80026b4:	4b0d      	ldr	r3, [pc, #52]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026c4:	4909      	ldr	r1, [pc, #36]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026c6:	4313      	orrs	r3, r2
 80026c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00f      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026d8:	4b04      	ldr	r3, [pc, #16]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026de:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e8:	e002      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80026ea:	bf00      	nop
 80026ec:	40023800 	.word	0x40023800
 80026f0:	4986      	ldr	r1, [pc, #536]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00b      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002704:	4b81      	ldr	r3, [pc, #516]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800270a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002714:	497d      	ldr	r1, [pc, #500]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d006      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 80d6 	beq.w	80028dc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002730:	4b76      	ldr	r3, [pc, #472]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a75      	ldr	r2, [pc, #468]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002736:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800273a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800273c:	f7fe ff8e 	bl	800165c <HAL_GetTick>
 8002740:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002744:	f7fe ff8a 	bl	800165c <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	; 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e195      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002756:	4b6d      	ldr	r3, [pc, #436]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d021      	beq.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002772:	2b00      	cmp	r3, #0
 8002774:	d11d      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002776:	4b65      	ldr	r3, [pc, #404]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800277c:	0c1b      	lsrs	r3, r3, #16
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002784:	4b61      	ldr	r3, [pc, #388]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800278a:	0e1b      	lsrs	r3, r3, #24
 800278c:	f003 030f 	and.w	r3, r3, #15
 8002790:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	019a      	lsls	r2, r3, #6
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	041b      	lsls	r3, r3, #16
 800279c:	431a      	orrs	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	061b      	lsls	r3, r3, #24
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	071b      	lsls	r3, r3, #28
 80027aa:	4958      	ldr	r1, [pc, #352]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d004      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027c6:	d00a      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d02e      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027dc:	d129      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027de:	4b4b      	ldr	r3, [pc, #300]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027e4:	0c1b      	lsrs	r3, r3, #16
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027ec:	4b47      	ldr	r3, [pc, #284]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027f2:	0f1b      	lsrs	r3, r3, #28
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	019a      	lsls	r2, r3, #6
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	041b      	lsls	r3, r3, #16
 8002804:	431a      	orrs	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	061b      	lsls	r3, r3, #24
 800280c:	431a      	orrs	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	071b      	lsls	r3, r3, #28
 8002812:	493e      	ldr	r1, [pc, #248]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002814:	4313      	orrs	r3, r2
 8002816:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800281a:	4b3c      	ldr	r3, [pc, #240]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800281c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002820:	f023 021f 	bic.w	r2, r3, #31
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002828:	3b01      	subs	r3, #1
 800282a:	4938      	ldr	r1, [pc, #224]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d01d      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800283e:	4b33      	ldr	r3, [pc, #204]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002844:	0e1b      	lsrs	r3, r3, #24
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800284c:	4b2f      	ldr	r3, [pc, #188]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800284e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002852:	0f1b      	lsrs	r3, r3, #28
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	019a      	lsls	r2, r3, #6
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	041b      	lsls	r3, r3, #16
 8002866:	431a      	orrs	r2, r3
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	061b      	lsls	r3, r3, #24
 800286c:	431a      	orrs	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	071b      	lsls	r3, r3, #28
 8002872:	4926      	ldr	r1, [pc, #152]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d011      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	019a      	lsls	r2, r3, #6
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	041b      	lsls	r3, r3, #16
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	061b      	lsls	r3, r3, #24
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	071b      	lsls	r3, r3, #28
 80028a2:	491a      	ldr	r1, [pc, #104]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028aa:	4b18      	ldr	r3, [pc, #96]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a17      	ldr	r2, [pc, #92]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b6:	f7fe fed1 	bl	800165c <HAL_GetTick>
 80028ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028bc:	e008      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028be:	f7fe fecd 	bl	800165c <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b64      	cmp	r3, #100	; 0x64
 80028ca:	d901      	bls.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e0d8      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028d0:	4b0e      	ldr	r3, [pc, #56]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0f0      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	f040 80ce 	bne.w	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80028e4:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a08      	ldr	r2, [pc, #32]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f0:	f7fe feb4 	bl	800165c <HAL_GetTick>
 80028f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028f6:	e00b      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80028f8:	f7fe feb0 	bl	800165c <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b64      	cmp	r3, #100	; 0x64
 8002904:	d904      	bls.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e0bb      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002910:	4b5e      	ldr	r3, [pc, #376]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002918:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800291c:	d0ec      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800293a:	2b00      	cmp	r3, #0
 800293c:	d02e      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	2b00      	cmp	r3, #0
 8002944:	d12a      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002946:	4b51      	ldr	r3, [pc, #324]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294c:	0c1b      	lsrs	r3, r3, #16
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002954:	4b4d      	ldr	r3, [pc, #308]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295a:	0f1b      	lsrs	r3, r3, #28
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	019a      	lsls	r2, r3, #6
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	041b      	lsls	r3, r3, #16
 800296c:	431a      	orrs	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	061b      	lsls	r3, r3, #24
 8002974:	431a      	orrs	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	071b      	lsls	r3, r3, #28
 800297a:	4944      	ldr	r1, [pc, #272]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002982:	4b42      	ldr	r3, [pc, #264]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002988:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002990:	3b01      	subs	r3, #1
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	493d      	ldr	r1, [pc, #244]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d022      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029b0:	d11d      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029b2:	4b36      	ldr	r3, [pc, #216]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b8:	0e1b      	lsrs	r3, r3, #24
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029c0:	4b32      	ldr	r3, [pc, #200]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	0f1b      	lsrs	r3, r3, #28
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	019a      	lsls	r2, r3, #6
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a1b      	ldr	r3, [r3, #32]
 80029d8:	041b      	lsls	r3, r3, #16
 80029da:	431a      	orrs	r2, r3
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	061b      	lsls	r3, r3, #24
 80029e0:	431a      	orrs	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	071b      	lsls	r3, r3, #28
 80029e6:	4929      	ldr	r1, [pc, #164]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d028      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029fa:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a00:	0e1b      	lsrs	r3, r3, #24
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a08:	4b20      	ldr	r3, [pc, #128]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	0c1b      	lsrs	r3, r3, #16
 8002a10:	f003 0303 	and.w	r3, r3, #3
 8002a14:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	019a      	lsls	r2, r3, #6
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	041b      	lsls	r3, r3, #16
 8002a20:	431a      	orrs	r2, r3
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	061b      	lsls	r3, r3, #24
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	071b      	lsls	r3, r3, #28
 8002a2e:	4917      	ldr	r1, [pc, #92]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	4911      	ldr	r1, [pc, #68]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a0e      	ldr	r2, [pc, #56]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a58:	f7fe fe00 	bl	800165c <HAL_GetTick>
 8002a5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a60:	f7fe fdfc 	bl	800165c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b64      	cmp	r3, #100	; 0x64
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e007      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a7e:	d1ef      	bne.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3720      	adds	r7, #32
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40023800 	.word	0x40023800

08002a90 <__errno>:
 8002a90:	4b01      	ldr	r3, [pc, #4]	; (8002a98 <__errno+0x8>)
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	2000041c 	.word	0x2000041c

08002a9c <__libc_init_array>:
 8002a9c:	b570      	push	{r4, r5, r6, lr}
 8002a9e:	4d0d      	ldr	r5, [pc, #52]	; (8002ad4 <__libc_init_array+0x38>)
 8002aa0:	4c0d      	ldr	r4, [pc, #52]	; (8002ad8 <__libc_init_array+0x3c>)
 8002aa2:	1b64      	subs	r4, r4, r5
 8002aa4:	10a4      	asrs	r4, r4, #2
 8002aa6:	2600      	movs	r6, #0
 8002aa8:	42a6      	cmp	r6, r4
 8002aaa:	d109      	bne.n	8002ac0 <__libc_init_array+0x24>
 8002aac:	4d0b      	ldr	r5, [pc, #44]	; (8002adc <__libc_init_array+0x40>)
 8002aae:	4c0c      	ldr	r4, [pc, #48]	; (8002ae0 <__libc_init_array+0x44>)
 8002ab0:	f000 fc4e 	bl	8003350 <_init>
 8002ab4:	1b64      	subs	r4, r4, r5
 8002ab6:	10a4      	asrs	r4, r4, #2
 8002ab8:	2600      	movs	r6, #0
 8002aba:	42a6      	cmp	r6, r4
 8002abc:	d105      	bne.n	8002aca <__libc_init_array+0x2e>
 8002abe:	bd70      	pop	{r4, r5, r6, pc}
 8002ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ac4:	4798      	blx	r3
 8002ac6:	3601      	adds	r6, #1
 8002ac8:	e7ee      	b.n	8002aa8 <__libc_init_array+0xc>
 8002aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ace:	4798      	blx	r3
 8002ad0:	3601      	adds	r6, #1
 8002ad2:	e7f2      	b.n	8002aba <__libc_init_array+0x1e>
 8002ad4:	080033d8 	.word	0x080033d8
 8002ad8:	080033d8 	.word	0x080033d8
 8002adc:	080033d8 	.word	0x080033d8
 8002ae0:	080033dc 	.word	0x080033dc

08002ae4 <memset>:
 8002ae4:	4402      	add	r2, r0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d100      	bne.n	8002aee <memset+0xa>
 8002aec:	4770      	bx	lr
 8002aee:	f803 1b01 	strb.w	r1, [r3], #1
 8002af2:	e7f9      	b.n	8002ae8 <memset+0x4>

08002af4 <siprintf>:
 8002af4:	b40e      	push	{r1, r2, r3}
 8002af6:	b500      	push	{lr}
 8002af8:	b09c      	sub	sp, #112	; 0x70
 8002afa:	ab1d      	add	r3, sp, #116	; 0x74
 8002afc:	9002      	str	r0, [sp, #8]
 8002afe:	9006      	str	r0, [sp, #24]
 8002b00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002b04:	4809      	ldr	r0, [pc, #36]	; (8002b2c <siprintf+0x38>)
 8002b06:	9107      	str	r1, [sp, #28]
 8002b08:	9104      	str	r1, [sp, #16]
 8002b0a:	4909      	ldr	r1, [pc, #36]	; (8002b30 <siprintf+0x3c>)
 8002b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b10:	9105      	str	r1, [sp, #20]
 8002b12:	6800      	ldr	r0, [r0, #0]
 8002b14:	9301      	str	r3, [sp, #4]
 8002b16:	a902      	add	r1, sp, #8
 8002b18:	f000 f868 	bl	8002bec <_svfiprintf_r>
 8002b1c:	9b02      	ldr	r3, [sp, #8]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	701a      	strb	r2, [r3, #0]
 8002b22:	b01c      	add	sp, #112	; 0x70
 8002b24:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b28:	b003      	add	sp, #12
 8002b2a:	4770      	bx	lr
 8002b2c:	2000041c 	.word	0x2000041c
 8002b30:	ffff0208 	.word	0xffff0208

08002b34 <__ssputs_r>:
 8002b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b38:	688e      	ldr	r6, [r1, #8]
 8002b3a:	429e      	cmp	r6, r3
 8002b3c:	4682      	mov	sl, r0
 8002b3e:	460c      	mov	r4, r1
 8002b40:	4690      	mov	r8, r2
 8002b42:	461f      	mov	r7, r3
 8002b44:	d838      	bhi.n	8002bb8 <__ssputs_r+0x84>
 8002b46:	898a      	ldrh	r2, [r1, #12]
 8002b48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b4c:	d032      	beq.n	8002bb4 <__ssputs_r+0x80>
 8002b4e:	6825      	ldr	r5, [r4, #0]
 8002b50:	6909      	ldr	r1, [r1, #16]
 8002b52:	eba5 0901 	sub.w	r9, r5, r1
 8002b56:	6965      	ldr	r5, [r4, #20]
 8002b58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002b60:	3301      	adds	r3, #1
 8002b62:	444b      	add	r3, r9
 8002b64:	106d      	asrs	r5, r5, #1
 8002b66:	429d      	cmp	r5, r3
 8002b68:	bf38      	it	cc
 8002b6a:	461d      	movcc	r5, r3
 8002b6c:	0553      	lsls	r3, r2, #21
 8002b6e:	d531      	bpl.n	8002bd4 <__ssputs_r+0xa0>
 8002b70:	4629      	mov	r1, r5
 8002b72:	f000 fb47 	bl	8003204 <_malloc_r>
 8002b76:	4606      	mov	r6, r0
 8002b78:	b950      	cbnz	r0, 8002b90 <__ssputs_r+0x5c>
 8002b7a:	230c      	movs	r3, #12
 8002b7c:	f8ca 3000 	str.w	r3, [sl]
 8002b80:	89a3      	ldrh	r3, [r4, #12]
 8002b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b86:	81a3      	strh	r3, [r4, #12]
 8002b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b90:	6921      	ldr	r1, [r4, #16]
 8002b92:	464a      	mov	r2, r9
 8002b94:	f000 fabe 	bl	8003114 <memcpy>
 8002b98:	89a3      	ldrh	r3, [r4, #12]
 8002b9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba2:	81a3      	strh	r3, [r4, #12]
 8002ba4:	6126      	str	r6, [r4, #16]
 8002ba6:	6165      	str	r5, [r4, #20]
 8002ba8:	444e      	add	r6, r9
 8002baa:	eba5 0509 	sub.w	r5, r5, r9
 8002bae:	6026      	str	r6, [r4, #0]
 8002bb0:	60a5      	str	r5, [r4, #8]
 8002bb2:	463e      	mov	r6, r7
 8002bb4:	42be      	cmp	r6, r7
 8002bb6:	d900      	bls.n	8002bba <__ssputs_r+0x86>
 8002bb8:	463e      	mov	r6, r7
 8002bba:	4632      	mov	r2, r6
 8002bbc:	6820      	ldr	r0, [r4, #0]
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	f000 fab6 	bl	8003130 <memmove>
 8002bc4:	68a3      	ldr	r3, [r4, #8]
 8002bc6:	6822      	ldr	r2, [r4, #0]
 8002bc8:	1b9b      	subs	r3, r3, r6
 8002bca:	4432      	add	r2, r6
 8002bcc:	60a3      	str	r3, [r4, #8]
 8002bce:	6022      	str	r2, [r4, #0]
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	e7db      	b.n	8002b8c <__ssputs_r+0x58>
 8002bd4:	462a      	mov	r2, r5
 8002bd6:	f000 fb6f 	bl	80032b8 <_realloc_r>
 8002bda:	4606      	mov	r6, r0
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	d1e1      	bne.n	8002ba4 <__ssputs_r+0x70>
 8002be0:	6921      	ldr	r1, [r4, #16]
 8002be2:	4650      	mov	r0, sl
 8002be4:	f000 fabe 	bl	8003164 <_free_r>
 8002be8:	e7c7      	b.n	8002b7a <__ssputs_r+0x46>
	...

08002bec <_svfiprintf_r>:
 8002bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bf0:	4698      	mov	r8, r3
 8002bf2:	898b      	ldrh	r3, [r1, #12]
 8002bf4:	061b      	lsls	r3, r3, #24
 8002bf6:	b09d      	sub	sp, #116	; 0x74
 8002bf8:	4607      	mov	r7, r0
 8002bfa:	460d      	mov	r5, r1
 8002bfc:	4614      	mov	r4, r2
 8002bfe:	d50e      	bpl.n	8002c1e <_svfiprintf_r+0x32>
 8002c00:	690b      	ldr	r3, [r1, #16]
 8002c02:	b963      	cbnz	r3, 8002c1e <_svfiprintf_r+0x32>
 8002c04:	2140      	movs	r1, #64	; 0x40
 8002c06:	f000 fafd 	bl	8003204 <_malloc_r>
 8002c0a:	6028      	str	r0, [r5, #0]
 8002c0c:	6128      	str	r0, [r5, #16]
 8002c0e:	b920      	cbnz	r0, 8002c1a <_svfiprintf_r+0x2e>
 8002c10:	230c      	movs	r3, #12
 8002c12:	603b      	str	r3, [r7, #0]
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c18:	e0d1      	b.n	8002dbe <_svfiprintf_r+0x1d2>
 8002c1a:	2340      	movs	r3, #64	; 0x40
 8002c1c:	616b      	str	r3, [r5, #20]
 8002c1e:	2300      	movs	r3, #0
 8002c20:	9309      	str	r3, [sp, #36]	; 0x24
 8002c22:	2320      	movs	r3, #32
 8002c24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c28:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c2c:	2330      	movs	r3, #48	; 0x30
 8002c2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002dd8 <_svfiprintf_r+0x1ec>
 8002c32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c36:	f04f 0901 	mov.w	r9, #1
 8002c3a:	4623      	mov	r3, r4
 8002c3c:	469a      	mov	sl, r3
 8002c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c42:	b10a      	cbz	r2, 8002c48 <_svfiprintf_r+0x5c>
 8002c44:	2a25      	cmp	r2, #37	; 0x25
 8002c46:	d1f9      	bne.n	8002c3c <_svfiprintf_r+0x50>
 8002c48:	ebba 0b04 	subs.w	fp, sl, r4
 8002c4c:	d00b      	beq.n	8002c66 <_svfiprintf_r+0x7a>
 8002c4e:	465b      	mov	r3, fp
 8002c50:	4622      	mov	r2, r4
 8002c52:	4629      	mov	r1, r5
 8002c54:	4638      	mov	r0, r7
 8002c56:	f7ff ff6d 	bl	8002b34 <__ssputs_r>
 8002c5a:	3001      	adds	r0, #1
 8002c5c:	f000 80aa 	beq.w	8002db4 <_svfiprintf_r+0x1c8>
 8002c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002c62:	445a      	add	r2, fp
 8002c64:	9209      	str	r2, [sp, #36]	; 0x24
 8002c66:	f89a 3000 	ldrb.w	r3, [sl]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 80a2 	beq.w	8002db4 <_svfiprintf_r+0x1c8>
 8002c70:	2300      	movs	r3, #0
 8002c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c7a:	f10a 0a01 	add.w	sl, sl, #1
 8002c7e:	9304      	str	r3, [sp, #16]
 8002c80:	9307      	str	r3, [sp, #28]
 8002c82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c86:	931a      	str	r3, [sp, #104]	; 0x68
 8002c88:	4654      	mov	r4, sl
 8002c8a:	2205      	movs	r2, #5
 8002c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c90:	4851      	ldr	r0, [pc, #324]	; (8002dd8 <_svfiprintf_r+0x1ec>)
 8002c92:	f7fd fad5 	bl	8000240 <memchr>
 8002c96:	9a04      	ldr	r2, [sp, #16]
 8002c98:	b9d8      	cbnz	r0, 8002cd2 <_svfiprintf_r+0xe6>
 8002c9a:	06d0      	lsls	r0, r2, #27
 8002c9c:	bf44      	itt	mi
 8002c9e:	2320      	movmi	r3, #32
 8002ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002ca4:	0711      	lsls	r1, r2, #28
 8002ca6:	bf44      	itt	mi
 8002ca8:	232b      	movmi	r3, #43	; 0x2b
 8002caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cae:	f89a 3000 	ldrb.w	r3, [sl]
 8002cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8002cb4:	d015      	beq.n	8002ce2 <_svfiprintf_r+0xf6>
 8002cb6:	9a07      	ldr	r2, [sp, #28]
 8002cb8:	4654      	mov	r4, sl
 8002cba:	2000      	movs	r0, #0
 8002cbc:	f04f 0c0a 	mov.w	ip, #10
 8002cc0:	4621      	mov	r1, r4
 8002cc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cc6:	3b30      	subs	r3, #48	; 0x30
 8002cc8:	2b09      	cmp	r3, #9
 8002cca:	d94e      	bls.n	8002d6a <_svfiprintf_r+0x17e>
 8002ccc:	b1b0      	cbz	r0, 8002cfc <_svfiprintf_r+0x110>
 8002cce:	9207      	str	r2, [sp, #28]
 8002cd0:	e014      	b.n	8002cfc <_svfiprintf_r+0x110>
 8002cd2:	eba0 0308 	sub.w	r3, r0, r8
 8002cd6:	fa09 f303 	lsl.w	r3, r9, r3
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	9304      	str	r3, [sp, #16]
 8002cde:	46a2      	mov	sl, r4
 8002ce0:	e7d2      	b.n	8002c88 <_svfiprintf_r+0x9c>
 8002ce2:	9b03      	ldr	r3, [sp, #12]
 8002ce4:	1d19      	adds	r1, r3, #4
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	9103      	str	r1, [sp, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	bfbb      	ittet	lt
 8002cee:	425b      	neglt	r3, r3
 8002cf0:	f042 0202 	orrlt.w	r2, r2, #2
 8002cf4:	9307      	strge	r3, [sp, #28]
 8002cf6:	9307      	strlt	r3, [sp, #28]
 8002cf8:	bfb8      	it	lt
 8002cfa:	9204      	strlt	r2, [sp, #16]
 8002cfc:	7823      	ldrb	r3, [r4, #0]
 8002cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8002d00:	d10c      	bne.n	8002d1c <_svfiprintf_r+0x130>
 8002d02:	7863      	ldrb	r3, [r4, #1]
 8002d04:	2b2a      	cmp	r3, #42	; 0x2a
 8002d06:	d135      	bne.n	8002d74 <_svfiprintf_r+0x188>
 8002d08:	9b03      	ldr	r3, [sp, #12]
 8002d0a:	1d1a      	adds	r2, r3, #4
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	9203      	str	r2, [sp, #12]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	bfb8      	it	lt
 8002d14:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002d18:	3402      	adds	r4, #2
 8002d1a:	9305      	str	r3, [sp, #20]
 8002d1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002de8 <_svfiprintf_r+0x1fc>
 8002d20:	7821      	ldrb	r1, [r4, #0]
 8002d22:	2203      	movs	r2, #3
 8002d24:	4650      	mov	r0, sl
 8002d26:	f7fd fa8b 	bl	8000240 <memchr>
 8002d2a:	b140      	cbz	r0, 8002d3e <_svfiprintf_r+0x152>
 8002d2c:	2340      	movs	r3, #64	; 0x40
 8002d2e:	eba0 000a 	sub.w	r0, r0, sl
 8002d32:	fa03 f000 	lsl.w	r0, r3, r0
 8002d36:	9b04      	ldr	r3, [sp, #16]
 8002d38:	4303      	orrs	r3, r0
 8002d3a:	3401      	adds	r4, #1
 8002d3c:	9304      	str	r3, [sp, #16]
 8002d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d42:	4826      	ldr	r0, [pc, #152]	; (8002ddc <_svfiprintf_r+0x1f0>)
 8002d44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d48:	2206      	movs	r2, #6
 8002d4a:	f7fd fa79 	bl	8000240 <memchr>
 8002d4e:	2800      	cmp	r0, #0
 8002d50:	d038      	beq.n	8002dc4 <_svfiprintf_r+0x1d8>
 8002d52:	4b23      	ldr	r3, [pc, #140]	; (8002de0 <_svfiprintf_r+0x1f4>)
 8002d54:	bb1b      	cbnz	r3, 8002d9e <_svfiprintf_r+0x1b2>
 8002d56:	9b03      	ldr	r3, [sp, #12]
 8002d58:	3307      	adds	r3, #7
 8002d5a:	f023 0307 	bic.w	r3, r3, #7
 8002d5e:	3308      	adds	r3, #8
 8002d60:	9303      	str	r3, [sp, #12]
 8002d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d64:	4433      	add	r3, r6
 8002d66:	9309      	str	r3, [sp, #36]	; 0x24
 8002d68:	e767      	b.n	8002c3a <_svfiprintf_r+0x4e>
 8002d6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d6e:	460c      	mov	r4, r1
 8002d70:	2001      	movs	r0, #1
 8002d72:	e7a5      	b.n	8002cc0 <_svfiprintf_r+0xd4>
 8002d74:	2300      	movs	r3, #0
 8002d76:	3401      	adds	r4, #1
 8002d78:	9305      	str	r3, [sp, #20]
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f04f 0c0a 	mov.w	ip, #10
 8002d80:	4620      	mov	r0, r4
 8002d82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d86:	3a30      	subs	r2, #48	; 0x30
 8002d88:	2a09      	cmp	r2, #9
 8002d8a:	d903      	bls.n	8002d94 <_svfiprintf_r+0x1a8>
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0c5      	beq.n	8002d1c <_svfiprintf_r+0x130>
 8002d90:	9105      	str	r1, [sp, #20]
 8002d92:	e7c3      	b.n	8002d1c <_svfiprintf_r+0x130>
 8002d94:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d98:	4604      	mov	r4, r0
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e7f0      	b.n	8002d80 <_svfiprintf_r+0x194>
 8002d9e:	ab03      	add	r3, sp, #12
 8002da0:	9300      	str	r3, [sp, #0]
 8002da2:	462a      	mov	r2, r5
 8002da4:	4b0f      	ldr	r3, [pc, #60]	; (8002de4 <_svfiprintf_r+0x1f8>)
 8002da6:	a904      	add	r1, sp, #16
 8002da8:	4638      	mov	r0, r7
 8002daa:	f3af 8000 	nop.w
 8002dae:	1c42      	adds	r2, r0, #1
 8002db0:	4606      	mov	r6, r0
 8002db2:	d1d6      	bne.n	8002d62 <_svfiprintf_r+0x176>
 8002db4:	89ab      	ldrh	r3, [r5, #12]
 8002db6:	065b      	lsls	r3, r3, #25
 8002db8:	f53f af2c 	bmi.w	8002c14 <_svfiprintf_r+0x28>
 8002dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002dbe:	b01d      	add	sp, #116	; 0x74
 8002dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dc4:	ab03      	add	r3, sp, #12
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	462a      	mov	r2, r5
 8002dca:	4b06      	ldr	r3, [pc, #24]	; (8002de4 <_svfiprintf_r+0x1f8>)
 8002dcc:	a904      	add	r1, sp, #16
 8002dce:	4638      	mov	r0, r7
 8002dd0:	f000 f87a 	bl	8002ec8 <_printf_i>
 8002dd4:	e7eb      	b.n	8002dae <_svfiprintf_r+0x1c2>
 8002dd6:	bf00      	nop
 8002dd8:	0800339c 	.word	0x0800339c
 8002ddc:	080033a6 	.word	0x080033a6
 8002de0:	00000000 	.word	0x00000000
 8002de4:	08002b35 	.word	0x08002b35
 8002de8:	080033a2 	.word	0x080033a2

08002dec <_printf_common>:
 8002dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002df0:	4616      	mov	r6, r2
 8002df2:	4699      	mov	r9, r3
 8002df4:	688a      	ldr	r2, [r1, #8]
 8002df6:	690b      	ldr	r3, [r1, #16]
 8002df8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	bfb8      	it	lt
 8002e00:	4613      	movlt	r3, r2
 8002e02:	6033      	str	r3, [r6, #0]
 8002e04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e08:	4607      	mov	r7, r0
 8002e0a:	460c      	mov	r4, r1
 8002e0c:	b10a      	cbz	r2, 8002e12 <_printf_common+0x26>
 8002e0e:	3301      	adds	r3, #1
 8002e10:	6033      	str	r3, [r6, #0]
 8002e12:	6823      	ldr	r3, [r4, #0]
 8002e14:	0699      	lsls	r1, r3, #26
 8002e16:	bf42      	ittt	mi
 8002e18:	6833      	ldrmi	r3, [r6, #0]
 8002e1a:	3302      	addmi	r3, #2
 8002e1c:	6033      	strmi	r3, [r6, #0]
 8002e1e:	6825      	ldr	r5, [r4, #0]
 8002e20:	f015 0506 	ands.w	r5, r5, #6
 8002e24:	d106      	bne.n	8002e34 <_printf_common+0x48>
 8002e26:	f104 0a19 	add.w	sl, r4, #25
 8002e2a:	68e3      	ldr	r3, [r4, #12]
 8002e2c:	6832      	ldr	r2, [r6, #0]
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	42ab      	cmp	r3, r5
 8002e32:	dc26      	bgt.n	8002e82 <_printf_common+0x96>
 8002e34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e38:	1e13      	subs	r3, r2, #0
 8002e3a:	6822      	ldr	r2, [r4, #0]
 8002e3c:	bf18      	it	ne
 8002e3e:	2301      	movne	r3, #1
 8002e40:	0692      	lsls	r2, r2, #26
 8002e42:	d42b      	bmi.n	8002e9c <_printf_common+0xb0>
 8002e44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e48:	4649      	mov	r1, r9
 8002e4a:	4638      	mov	r0, r7
 8002e4c:	47c0      	blx	r8
 8002e4e:	3001      	adds	r0, #1
 8002e50:	d01e      	beq.n	8002e90 <_printf_common+0xa4>
 8002e52:	6823      	ldr	r3, [r4, #0]
 8002e54:	68e5      	ldr	r5, [r4, #12]
 8002e56:	6832      	ldr	r2, [r6, #0]
 8002e58:	f003 0306 	and.w	r3, r3, #6
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	bf08      	it	eq
 8002e60:	1aad      	subeq	r5, r5, r2
 8002e62:	68a3      	ldr	r3, [r4, #8]
 8002e64:	6922      	ldr	r2, [r4, #16]
 8002e66:	bf0c      	ite	eq
 8002e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e6c:	2500      	movne	r5, #0
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	bfc4      	itt	gt
 8002e72:	1a9b      	subgt	r3, r3, r2
 8002e74:	18ed      	addgt	r5, r5, r3
 8002e76:	2600      	movs	r6, #0
 8002e78:	341a      	adds	r4, #26
 8002e7a:	42b5      	cmp	r5, r6
 8002e7c:	d11a      	bne.n	8002eb4 <_printf_common+0xc8>
 8002e7e:	2000      	movs	r0, #0
 8002e80:	e008      	b.n	8002e94 <_printf_common+0xa8>
 8002e82:	2301      	movs	r3, #1
 8002e84:	4652      	mov	r2, sl
 8002e86:	4649      	mov	r1, r9
 8002e88:	4638      	mov	r0, r7
 8002e8a:	47c0      	blx	r8
 8002e8c:	3001      	adds	r0, #1
 8002e8e:	d103      	bne.n	8002e98 <_printf_common+0xac>
 8002e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e98:	3501      	adds	r5, #1
 8002e9a:	e7c6      	b.n	8002e2a <_printf_common+0x3e>
 8002e9c:	18e1      	adds	r1, r4, r3
 8002e9e:	1c5a      	adds	r2, r3, #1
 8002ea0:	2030      	movs	r0, #48	; 0x30
 8002ea2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ea6:	4422      	add	r2, r4
 8002ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002eac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002eb0:	3302      	adds	r3, #2
 8002eb2:	e7c7      	b.n	8002e44 <_printf_common+0x58>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	4622      	mov	r2, r4
 8002eb8:	4649      	mov	r1, r9
 8002eba:	4638      	mov	r0, r7
 8002ebc:	47c0      	blx	r8
 8002ebe:	3001      	adds	r0, #1
 8002ec0:	d0e6      	beq.n	8002e90 <_printf_common+0xa4>
 8002ec2:	3601      	adds	r6, #1
 8002ec4:	e7d9      	b.n	8002e7a <_printf_common+0x8e>
	...

08002ec8 <_printf_i>:
 8002ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ecc:	460c      	mov	r4, r1
 8002ece:	4691      	mov	r9, r2
 8002ed0:	7e27      	ldrb	r7, [r4, #24]
 8002ed2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002ed4:	2f78      	cmp	r7, #120	; 0x78
 8002ed6:	4680      	mov	r8, r0
 8002ed8:	469a      	mov	sl, r3
 8002eda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ede:	d807      	bhi.n	8002ef0 <_printf_i+0x28>
 8002ee0:	2f62      	cmp	r7, #98	; 0x62
 8002ee2:	d80a      	bhi.n	8002efa <_printf_i+0x32>
 8002ee4:	2f00      	cmp	r7, #0
 8002ee6:	f000 80d8 	beq.w	800309a <_printf_i+0x1d2>
 8002eea:	2f58      	cmp	r7, #88	; 0x58
 8002eec:	f000 80a3 	beq.w	8003036 <_printf_i+0x16e>
 8002ef0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002ef4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ef8:	e03a      	b.n	8002f70 <_printf_i+0xa8>
 8002efa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002efe:	2b15      	cmp	r3, #21
 8002f00:	d8f6      	bhi.n	8002ef0 <_printf_i+0x28>
 8002f02:	a001      	add	r0, pc, #4	; (adr r0, 8002f08 <_printf_i+0x40>)
 8002f04:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002f08:	08002f61 	.word	0x08002f61
 8002f0c:	08002f75 	.word	0x08002f75
 8002f10:	08002ef1 	.word	0x08002ef1
 8002f14:	08002ef1 	.word	0x08002ef1
 8002f18:	08002ef1 	.word	0x08002ef1
 8002f1c:	08002ef1 	.word	0x08002ef1
 8002f20:	08002f75 	.word	0x08002f75
 8002f24:	08002ef1 	.word	0x08002ef1
 8002f28:	08002ef1 	.word	0x08002ef1
 8002f2c:	08002ef1 	.word	0x08002ef1
 8002f30:	08002ef1 	.word	0x08002ef1
 8002f34:	08003081 	.word	0x08003081
 8002f38:	08002fa5 	.word	0x08002fa5
 8002f3c:	08003063 	.word	0x08003063
 8002f40:	08002ef1 	.word	0x08002ef1
 8002f44:	08002ef1 	.word	0x08002ef1
 8002f48:	080030a3 	.word	0x080030a3
 8002f4c:	08002ef1 	.word	0x08002ef1
 8002f50:	08002fa5 	.word	0x08002fa5
 8002f54:	08002ef1 	.word	0x08002ef1
 8002f58:	08002ef1 	.word	0x08002ef1
 8002f5c:	0800306b 	.word	0x0800306b
 8002f60:	680b      	ldr	r3, [r1, #0]
 8002f62:	1d1a      	adds	r2, r3, #4
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	600a      	str	r2, [r1, #0]
 8002f68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f70:	2301      	movs	r3, #1
 8002f72:	e0a3      	b.n	80030bc <_printf_i+0x1f4>
 8002f74:	6825      	ldr	r5, [r4, #0]
 8002f76:	6808      	ldr	r0, [r1, #0]
 8002f78:	062e      	lsls	r6, r5, #24
 8002f7a:	f100 0304 	add.w	r3, r0, #4
 8002f7e:	d50a      	bpl.n	8002f96 <_printf_i+0xce>
 8002f80:	6805      	ldr	r5, [r0, #0]
 8002f82:	600b      	str	r3, [r1, #0]
 8002f84:	2d00      	cmp	r5, #0
 8002f86:	da03      	bge.n	8002f90 <_printf_i+0xc8>
 8002f88:	232d      	movs	r3, #45	; 0x2d
 8002f8a:	426d      	negs	r5, r5
 8002f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f90:	485e      	ldr	r0, [pc, #376]	; (800310c <_printf_i+0x244>)
 8002f92:	230a      	movs	r3, #10
 8002f94:	e019      	b.n	8002fca <_printf_i+0x102>
 8002f96:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002f9a:	6805      	ldr	r5, [r0, #0]
 8002f9c:	600b      	str	r3, [r1, #0]
 8002f9e:	bf18      	it	ne
 8002fa0:	b22d      	sxthne	r5, r5
 8002fa2:	e7ef      	b.n	8002f84 <_printf_i+0xbc>
 8002fa4:	680b      	ldr	r3, [r1, #0]
 8002fa6:	6825      	ldr	r5, [r4, #0]
 8002fa8:	1d18      	adds	r0, r3, #4
 8002faa:	6008      	str	r0, [r1, #0]
 8002fac:	0628      	lsls	r0, r5, #24
 8002fae:	d501      	bpl.n	8002fb4 <_printf_i+0xec>
 8002fb0:	681d      	ldr	r5, [r3, #0]
 8002fb2:	e002      	b.n	8002fba <_printf_i+0xf2>
 8002fb4:	0669      	lsls	r1, r5, #25
 8002fb6:	d5fb      	bpl.n	8002fb0 <_printf_i+0xe8>
 8002fb8:	881d      	ldrh	r5, [r3, #0]
 8002fba:	4854      	ldr	r0, [pc, #336]	; (800310c <_printf_i+0x244>)
 8002fbc:	2f6f      	cmp	r7, #111	; 0x6f
 8002fbe:	bf0c      	ite	eq
 8002fc0:	2308      	moveq	r3, #8
 8002fc2:	230a      	movne	r3, #10
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002fca:	6866      	ldr	r6, [r4, #4]
 8002fcc:	60a6      	str	r6, [r4, #8]
 8002fce:	2e00      	cmp	r6, #0
 8002fd0:	bfa2      	ittt	ge
 8002fd2:	6821      	ldrge	r1, [r4, #0]
 8002fd4:	f021 0104 	bicge.w	r1, r1, #4
 8002fd8:	6021      	strge	r1, [r4, #0]
 8002fda:	b90d      	cbnz	r5, 8002fe0 <_printf_i+0x118>
 8002fdc:	2e00      	cmp	r6, #0
 8002fde:	d04d      	beq.n	800307c <_printf_i+0x1b4>
 8002fe0:	4616      	mov	r6, r2
 8002fe2:	fbb5 f1f3 	udiv	r1, r5, r3
 8002fe6:	fb03 5711 	mls	r7, r3, r1, r5
 8002fea:	5dc7      	ldrb	r7, [r0, r7]
 8002fec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002ff0:	462f      	mov	r7, r5
 8002ff2:	42bb      	cmp	r3, r7
 8002ff4:	460d      	mov	r5, r1
 8002ff6:	d9f4      	bls.n	8002fe2 <_printf_i+0x11a>
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d10b      	bne.n	8003014 <_printf_i+0x14c>
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	07df      	lsls	r7, r3, #31
 8003000:	d508      	bpl.n	8003014 <_printf_i+0x14c>
 8003002:	6923      	ldr	r3, [r4, #16]
 8003004:	6861      	ldr	r1, [r4, #4]
 8003006:	4299      	cmp	r1, r3
 8003008:	bfde      	ittt	le
 800300a:	2330      	movle	r3, #48	; 0x30
 800300c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003010:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8003014:	1b92      	subs	r2, r2, r6
 8003016:	6122      	str	r2, [r4, #16]
 8003018:	f8cd a000 	str.w	sl, [sp]
 800301c:	464b      	mov	r3, r9
 800301e:	aa03      	add	r2, sp, #12
 8003020:	4621      	mov	r1, r4
 8003022:	4640      	mov	r0, r8
 8003024:	f7ff fee2 	bl	8002dec <_printf_common>
 8003028:	3001      	adds	r0, #1
 800302a:	d14c      	bne.n	80030c6 <_printf_i+0x1fe>
 800302c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003030:	b004      	add	sp, #16
 8003032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003036:	4835      	ldr	r0, [pc, #212]	; (800310c <_printf_i+0x244>)
 8003038:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800303c:	6823      	ldr	r3, [r4, #0]
 800303e:	680e      	ldr	r6, [r1, #0]
 8003040:	061f      	lsls	r7, r3, #24
 8003042:	f856 5b04 	ldr.w	r5, [r6], #4
 8003046:	600e      	str	r6, [r1, #0]
 8003048:	d514      	bpl.n	8003074 <_printf_i+0x1ac>
 800304a:	07d9      	lsls	r1, r3, #31
 800304c:	bf44      	itt	mi
 800304e:	f043 0320 	orrmi.w	r3, r3, #32
 8003052:	6023      	strmi	r3, [r4, #0]
 8003054:	b91d      	cbnz	r5, 800305e <_printf_i+0x196>
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	f023 0320 	bic.w	r3, r3, #32
 800305c:	6023      	str	r3, [r4, #0]
 800305e:	2310      	movs	r3, #16
 8003060:	e7b0      	b.n	8002fc4 <_printf_i+0xfc>
 8003062:	6823      	ldr	r3, [r4, #0]
 8003064:	f043 0320 	orr.w	r3, r3, #32
 8003068:	6023      	str	r3, [r4, #0]
 800306a:	2378      	movs	r3, #120	; 0x78
 800306c:	4828      	ldr	r0, [pc, #160]	; (8003110 <_printf_i+0x248>)
 800306e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003072:	e7e3      	b.n	800303c <_printf_i+0x174>
 8003074:	065e      	lsls	r6, r3, #25
 8003076:	bf48      	it	mi
 8003078:	b2ad      	uxthmi	r5, r5
 800307a:	e7e6      	b.n	800304a <_printf_i+0x182>
 800307c:	4616      	mov	r6, r2
 800307e:	e7bb      	b.n	8002ff8 <_printf_i+0x130>
 8003080:	680b      	ldr	r3, [r1, #0]
 8003082:	6826      	ldr	r6, [r4, #0]
 8003084:	6960      	ldr	r0, [r4, #20]
 8003086:	1d1d      	adds	r5, r3, #4
 8003088:	600d      	str	r5, [r1, #0]
 800308a:	0635      	lsls	r5, r6, #24
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	d501      	bpl.n	8003094 <_printf_i+0x1cc>
 8003090:	6018      	str	r0, [r3, #0]
 8003092:	e002      	b.n	800309a <_printf_i+0x1d2>
 8003094:	0671      	lsls	r1, r6, #25
 8003096:	d5fb      	bpl.n	8003090 <_printf_i+0x1c8>
 8003098:	8018      	strh	r0, [r3, #0]
 800309a:	2300      	movs	r3, #0
 800309c:	6123      	str	r3, [r4, #16]
 800309e:	4616      	mov	r6, r2
 80030a0:	e7ba      	b.n	8003018 <_printf_i+0x150>
 80030a2:	680b      	ldr	r3, [r1, #0]
 80030a4:	1d1a      	adds	r2, r3, #4
 80030a6:	600a      	str	r2, [r1, #0]
 80030a8:	681e      	ldr	r6, [r3, #0]
 80030aa:	6862      	ldr	r2, [r4, #4]
 80030ac:	2100      	movs	r1, #0
 80030ae:	4630      	mov	r0, r6
 80030b0:	f7fd f8c6 	bl	8000240 <memchr>
 80030b4:	b108      	cbz	r0, 80030ba <_printf_i+0x1f2>
 80030b6:	1b80      	subs	r0, r0, r6
 80030b8:	6060      	str	r0, [r4, #4]
 80030ba:	6863      	ldr	r3, [r4, #4]
 80030bc:	6123      	str	r3, [r4, #16]
 80030be:	2300      	movs	r3, #0
 80030c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80030c4:	e7a8      	b.n	8003018 <_printf_i+0x150>
 80030c6:	6923      	ldr	r3, [r4, #16]
 80030c8:	4632      	mov	r2, r6
 80030ca:	4649      	mov	r1, r9
 80030cc:	4640      	mov	r0, r8
 80030ce:	47d0      	blx	sl
 80030d0:	3001      	adds	r0, #1
 80030d2:	d0ab      	beq.n	800302c <_printf_i+0x164>
 80030d4:	6823      	ldr	r3, [r4, #0]
 80030d6:	079b      	lsls	r3, r3, #30
 80030d8:	d413      	bmi.n	8003102 <_printf_i+0x23a>
 80030da:	68e0      	ldr	r0, [r4, #12]
 80030dc:	9b03      	ldr	r3, [sp, #12]
 80030de:	4298      	cmp	r0, r3
 80030e0:	bfb8      	it	lt
 80030e2:	4618      	movlt	r0, r3
 80030e4:	e7a4      	b.n	8003030 <_printf_i+0x168>
 80030e6:	2301      	movs	r3, #1
 80030e8:	4632      	mov	r2, r6
 80030ea:	4649      	mov	r1, r9
 80030ec:	4640      	mov	r0, r8
 80030ee:	47d0      	blx	sl
 80030f0:	3001      	adds	r0, #1
 80030f2:	d09b      	beq.n	800302c <_printf_i+0x164>
 80030f4:	3501      	adds	r5, #1
 80030f6:	68e3      	ldr	r3, [r4, #12]
 80030f8:	9903      	ldr	r1, [sp, #12]
 80030fa:	1a5b      	subs	r3, r3, r1
 80030fc:	42ab      	cmp	r3, r5
 80030fe:	dcf2      	bgt.n	80030e6 <_printf_i+0x21e>
 8003100:	e7eb      	b.n	80030da <_printf_i+0x212>
 8003102:	2500      	movs	r5, #0
 8003104:	f104 0619 	add.w	r6, r4, #25
 8003108:	e7f5      	b.n	80030f6 <_printf_i+0x22e>
 800310a:	bf00      	nop
 800310c:	080033ad 	.word	0x080033ad
 8003110:	080033be 	.word	0x080033be

08003114 <memcpy>:
 8003114:	440a      	add	r2, r1
 8003116:	4291      	cmp	r1, r2
 8003118:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800311c:	d100      	bne.n	8003120 <memcpy+0xc>
 800311e:	4770      	bx	lr
 8003120:	b510      	push	{r4, lr}
 8003122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003126:	f803 4f01 	strb.w	r4, [r3, #1]!
 800312a:	4291      	cmp	r1, r2
 800312c:	d1f9      	bne.n	8003122 <memcpy+0xe>
 800312e:	bd10      	pop	{r4, pc}

08003130 <memmove>:
 8003130:	4288      	cmp	r0, r1
 8003132:	b510      	push	{r4, lr}
 8003134:	eb01 0402 	add.w	r4, r1, r2
 8003138:	d902      	bls.n	8003140 <memmove+0x10>
 800313a:	4284      	cmp	r4, r0
 800313c:	4623      	mov	r3, r4
 800313e:	d807      	bhi.n	8003150 <memmove+0x20>
 8003140:	1e43      	subs	r3, r0, #1
 8003142:	42a1      	cmp	r1, r4
 8003144:	d008      	beq.n	8003158 <memmove+0x28>
 8003146:	f811 2b01 	ldrb.w	r2, [r1], #1
 800314a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800314e:	e7f8      	b.n	8003142 <memmove+0x12>
 8003150:	4402      	add	r2, r0
 8003152:	4601      	mov	r1, r0
 8003154:	428a      	cmp	r2, r1
 8003156:	d100      	bne.n	800315a <memmove+0x2a>
 8003158:	bd10      	pop	{r4, pc}
 800315a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800315e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003162:	e7f7      	b.n	8003154 <memmove+0x24>

08003164 <_free_r>:
 8003164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003166:	2900      	cmp	r1, #0
 8003168:	d048      	beq.n	80031fc <_free_r+0x98>
 800316a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800316e:	9001      	str	r0, [sp, #4]
 8003170:	2b00      	cmp	r3, #0
 8003172:	f1a1 0404 	sub.w	r4, r1, #4
 8003176:	bfb8      	it	lt
 8003178:	18e4      	addlt	r4, r4, r3
 800317a:	f000 f8d3 	bl	8003324 <__malloc_lock>
 800317e:	4a20      	ldr	r2, [pc, #128]	; (8003200 <_free_r+0x9c>)
 8003180:	9801      	ldr	r0, [sp, #4]
 8003182:	6813      	ldr	r3, [r2, #0]
 8003184:	4615      	mov	r5, r2
 8003186:	b933      	cbnz	r3, 8003196 <_free_r+0x32>
 8003188:	6063      	str	r3, [r4, #4]
 800318a:	6014      	str	r4, [r2, #0]
 800318c:	b003      	add	sp, #12
 800318e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003192:	f000 b8cd 	b.w	8003330 <__malloc_unlock>
 8003196:	42a3      	cmp	r3, r4
 8003198:	d90b      	bls.n	80031b2 <_free_r+0x4e>
 800319a:	6821      	ldr	r1, [r4, #0]
 800319c:	1862      	adds	r2, r4, r1
 800319e:	4293      	cmp	r3, r2
 80031a0:	bf04      	itt	eq
 80031a2:	681a      	ldreq	r2, [r3, #0]
 80031a4:	685b      	ldreq	r3, [r3, #4]
 80031a6:	6063      	str	r3, [r4, #4]
 80031a8:	bf04      	itt	eq
 80031aa:	1852      	addeq	r2, r2, r1
 80031ac:	6022      	streq	r2, [r4, #0]
 80031ae:	602c      	str	r4, [r5, #0]
 80031b0:	e7ec      	b.n	800318c <_free_r+0x28>
 80031b2:	461a      	mov	r2, r3
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	b10b      	cbz	r3, 80031bc <_free_r+0x58>
 80031b8:	42a3      	cmp	r3, r4
 80031ba:	d9fa      	bls.n	80031b2 <_free_r+0x4e>
 80031bc:	6811      	ldr	r1, [r2, #0]
 80031be:	1855      	adds	r5, r2, r1
 80031c0:	42a5      	cmp	r5, r4
 80031c2:	d10b      	bne.n	80031dc <_free_r+0x78>
 80031c4:	6824      	ldr	r4, [r4, #0]
 80031c6:	4421      	add	r1, r4
 80031c8:	1854      	adds	r4, r2, r1
 80031ca:	42a3      	cmp	r3, r4
 80031cc:	6011      	str	r1, [r2, #0]
 80031ce:	d1dd      	bne.n	800318c <_free_r+0x28>
 80031d0:	681c      	ldr	r4, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	6053      	str	r3, [r2, #4]
 80031d6:	4421      	add	r1, r4
 80031d8:	6011      	str	r1, [r2, #0]
 80031da:	e7d7      	b.n	800318c <_free_r+0x28>
 80031dc:	d902      	bls.n	80031e4 <_free_r+0x80>
 80031de:	230c      	movs	r3, #12
 80031e0:	6003      	str	r3, [r0, #0]
 80031e2:	e7d3      	b.n	800318c <_free_r+0x28>
 80031e4:	6825      	ldr	r5, [r4, #0]
 80031e6:	1961      	adds	r1, r4, r5
 80031e8:	428b      	cmp	r3, r1
 80031ea:	bf04      	itt	eq
 80031ec:	6819      	ldreq	r1, [r3, #0]
 80031ee:	685b      	ldreq	r3, [r3, #4]
 80031f0:	6063      	str	r3, [r4, #4]
 80031f2:	bf04      	itt	eq
 80031f4:	1949      	addeq	r1, r1, r5
 80031f6:	6021      	streq	r1, [r4, #0]
 80031f8:	6054      	str	r4, [r2, #4]
 80031fa:	e7c7      	b.n	800318c <_free_r+0x28>
 80031fc:	b003      	add	sp, #12
 80031fe:	bd30      	pop	{r4, r5, pc}
 8003200:	200004a4 	.word	0x200004a4

08003204 <_malloc_r>:
 8003204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003206:	1ccd      	adds	r5, r1, #3
 8003208:	f025 0503 	bic.w	r5, r5, #3
 800320c:	3508      	adds	r5, #8
 800320e:	2d0c      	cmp	r5, #12
 8003210:	bf38      	it	cc
 8003212:	250c      	movcc	r5, #12
 8003214:	2d00      	cmp	r5, #0
 8003216:	4606      	mov	r6, r0
 8003218:	db01      	blt.n	800321e <_malloc_r+0x1a>
 800321a:	42a9      	cmp	r1, r5
 800321c:	d903      	bls.n	8003226 <_malloc_r+0x22>
 800321e:	230c      	movs	r3, #12
 8003220:	6033      	str	r3, [r6, #0]
 8003222:	2000      	movs	r0, #0
 8003224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003226:	f000 f87d 	bl	8003324 <__malloc_lock>
 800322a:	4921      	ldr	r1, [pc, #132]	; (80032b0 <_malloc_r+0xac>)
 800322c:	680a      	ldr	r2, [r1, #0]
 800322e:	4614      	mov	r4, r2
 8003230:	b99c      	cbnz	r4, 800325a <_malloc_r+0x56>
 8003232:	4f20      	ldr	r7, [pc, #128]	; (80032b4 <_malloc_r+0xb0>)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	b923      	cbnz	r3, 8003242 <_malloc_r+0x3e>
 8003238:	4621      	mov	r1, r4
 800323a:	4630      	mov	r0, r6
 800323c:	f000 f862 	bl	8003304 <_sbrk_r>
 8003240:	6038      	str	r0, [r7, #0]
 8003242:	4629      	mov	r1, r5
 8003244:	4630      	mov	r0, r6
 8003246:	f000 f85d 	bl	8003304 <_sbrk_r>
 800324a:	1c43      	adds	r3, r0, #1
 800324c:	d123      	bne.n	8003296 <_malloc_r+0x92>
 800324e:	230c      	movs	r3, #12
 8003250:	6033      	str	r3, [r6, #0]
 8003252:	4630      	mov	r0, r6
 8003254:	f000 f86c 	bl	8003330 <__malloc_unlock>
 8003258:	e7e3      	b.n	8003222 <_malloc_r+0x1e>
 800325a:	6823      	ldr	r3, [r4, #0]
 800325c:	1b5b      	subs	r3, r3, r5
 800325e:	d417      	bmi.n	8003290 <_malloc_r+0x8c>
 8003260:	2b0b      	cmp	r3, #11
 8003262:	d903      	bls.n	800326c <_malloc_r+0x68>
 8003264:	6023      	str	r3, [r4, #0]
 8003266:	441c      	add	r4, r3
 8003268:	6025      	str	r5, [r4, #0]
 800326a:	e004      	b.n	8003276 <_malloc_r+0x72>
 800326c:	6863      	ldr	r3, [r4, #4]
 800326e:	42a2      	cmp	r2, r4
 8003270:	bf0c      	ite	eq
 8003272:	600b      	streq	r3, [r1, #0]
 8003274:	6053      	strne	r3, [r2, #4]
 8003276:	4630      	mov	r0, r6
 8003278:	f000 f85a 	bl	8003330 <__malloc_unlock>
 800327c:	f104 000b 	add.w	r0, r4, #11
 8003280:	1d23      	adds	r3, r4, #4
 8003282:	f020 0007 	bic.w	r0, r0, #7
 8003286:	1ac2      	subs	r2, r0, r3
 8003288:	d0cc      	beq.n	8003224 <_malloc_r+0x20>
 800328a:	1a1b      	subs	r3, r3, r0
 800328c:	50a3      	str	r3, [r4, r2]
 800328e:	e7c9      	b.n	8003224 <_malloc_r+0x20>
 8003290:	4622      	mov	r2, r4
 8003292:	6864      	ldr	r4, [r4, #4]
 8003294:	e7cc      	b.n	8003230 <_malloc_r+0x2c>
 8003296:	1cc4      	adds	r4, r0, #3
 8003298:	f024 0403 	bic.w	r4, r4, #3
 800329c:	42a0      	cmp	r0, r4
 800329e:	d0e3      	beq.n	8003268 <_malloc_r+0x64>
 80032a0:	1a21      	subs	r1, r4, r0
 80032a2:	4630      	mov	r0, r6
 80032a4:	f000 f82e 	bl	8003304 <_sbrk_r>
 80032a8:	3001      	adds	r0, #1
 80032aa:	d1dd      	bne.n	8003268 <_malloc_r+0x64>
 80032ac:	e7cf      	b.n	800324e <_malloc_r+0x4a>
 80032ae:	bf00      	nop
 80032b0:	200004a4 	.word	0x200004a4
 80032b4:	200004a8 	.word	0x200004a8

080032b8 <_realloc_r>:
 80032b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ba:	4607      	mov	r7, r0
 80032bc:	4614      	mov	r4, r2
 80032be:	460e      	mov	r6, r1
 80032c0:	b921      	cbnz	r1, 80032cc <_realloc_r+0x14>
 80032c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80032c6:	4611      	mov	r1, r2
 80032c8:	f7ff bf9c 	b.w	8003204 <_malloc_r>
 80032cc:	b922      	cbnz	r2, 80032d8 <_realloc_r+0x20>
 80032ce:	f7ff ff49 	bl	8003164 <_free_r>
 80032d2:	4625      	mov	r5, r4
 80032d4:	4628      	mov	r0, r5
 80032d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032d8:	f000 f830 	bl	800333c <_malloc_usable_size_r>
 80032dc:	42a0      	cmp	r0, r4
 80032de:	d20f      	bcs.n	8003300 <_realloc_r+0x48>
 80032e0:	4621      	mov	r1, r4
 80032e2:	4638      	mov	r0, r7
 80032e4:	f7ff ff8e 	bl	8003204 <_malloc_r>
 80032e8:	4605      	mov	r5, r0
 80032ea:	2800      	cmp	r0, #0
 80032ec:	d0f2      	beq.n	80032d4 <_realloc_r+0x1c>
 80032ee:	4631      	mov	r1, r6
 80032f0:	4622      	mov	r2, r4
 80032f2:	f7ff ff0f 	bl	8003114 <memcpy>
 80032f6:	4631      	mov	r1, r6
 80032f8:	4638      	mov	r0, r7
 80032fa:	f7ff ff33 	bl	8003164 <_free_r>
 80032fe:	e7e9      	b.n	80032d4 <_realloc_r+0x1c>
 8003300:	4635      	mov	r5, r6
 8003302:	e7e7      	b.n	80032d4 <_realloc_r+0x1c>

08003304 <_sbrk_r>:
 8003304:	b538      	push	{r3, r4, r5, lr}
 8003306:	4d06      	ldr	r5, [pc, #24]	; (8003320 <_sbrk_r+0x1c>)
 8003308:	2300      	movs	r3, #0
 800330a:	4604      	mov	r4, r0
 800330c:	4608      	mov	r0, r1
 800330e:	602b      	str	r3, [r5, #0]
 8003310:	f7fe f8e2 	bl	80014d8 <_sbrk>
 8003314:	1c43      	adds	r3, r0, #1
 8003316:	d102      	bne.n	800331e <_sbrk_r+0x1a>
 8003318:	682b      	ldr	r3, [r5, #0]
 800331a:	b103      	cbz	r3, 800331e <_sbrk_r+0x1a>
 800331c:	6023      	str	r3, [r4, #0]
 800331e:	bd38      	pop	{r3, r4, r5, pc}
 8003320:	20013d64 	.word	0x20013d64

08003324 <__malloc_lock>:
 8003324:	4801      	ldr	r0, [pc, #4]	; (800332c <__malloc_lock+0x8>)
 8003326:	f000 b811 	b.w	800334c <__retarget_lock_acquire_recursive>
 800332a:	bf00      	nop
 800332c:	20013d6c 	.word	0x20013d6c

08003330 <__malloc_unlock>:
 8003330:	4801      	ldr	r0, [pc, #4]	; (8003338 <__malloc_unlock+0x8>)
 8003332:	f000 b80c 	b.w	800334e <__retarget_lock_release_recursive>
 8003336:	bf00      	nop
 8003338:	20013d6c 	.word	0x20013d6c

0800333c <_malloc_usable_size_r>:
 800333c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003340:	1f18      	subs	r0, r3, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	bfbc      	itt	lt
 8003346:	580b      	ldrlt	r3, [r1, r0]
 8003348:	18c0      	addlt	r0, r0, r3
 800334a:	4770      	bx	lr

0800334c <__retarget_lock_acquire_recursive>:
 800334c:	4770      	bx	lr

0800334e <__retarget_lock_release_recursive>:
 800334e:	4770      	bx	lr

08003350 <_init>:
 8003350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003352:	bf00      	nop
 8003354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003356:	bc08      	pop	{r3}
 8003358:	469e      	mov	lr, r3
 800335a:	4770      	bx	lr

0800335c <_fini>:
 800335c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335e:	bf00      	nop
 8003360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003362:	bc08      	pop	{r3}
 8003364:	469e      	mov	lr, r3
 8003366:	4770      	bx	lr
